// @ts-nocheck
/**
 * Edge Function: agente-liftlio (v11 - RAG Melhorado)
 * 
 * Descri√ß√£o:
 * Melhorias significativas na integra√ß√£o RAG para respostas mais precisas.
 * 
 * Melhorias v11:
 * - Busca RAG mais inteligente com an√°lise sem√¢ntica
 * - Categoriza√ß√£o de perguntas para busca otimizada
 * - Formata√ß√£o melhorada do contexto RAG
 * - Deduplica√ß√£o e ranking de resultados
 * - Logs detalhados para debug
 * 
 * @author Valdair & Claude
 * @date 12/01/2025
 */

import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.7';

// Vari√°veis de ambiente
const ANTHROPIC_API_KEY = Deno.env.get('CLAUDE_API_KEY');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

// Cliente Supabase com service role para acessar todos os dados
const supabase = createClient(
  SUPABASE_URL!,
  SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

/**
 * Detecta o idioma do texto
 */
function detectLanguage(text: string): 'pt' | 'en' {
  // Palavras comuns em portugu√™s
  const ptWords = /\b(voc√™|voce|est√°|esta|s√£o|sao|tem|tudo|bem|ola|ol√°|obrigado|por favor|ajuda|preciso|quero|fazer|isso|aqui|agora|hoje|ontem|amanh√£|sim|n√£o|nao|mais|menos|muito|pouco|grande|pequeno|bom|ruim|melhor|pior|quantas|quantos|quais|mensagens|postadas|v√≠deos|canais)\b/i;
  
  // Palavras comuns em ingl√™s
  const enWords = /\b(you|are|is|have|hello|hi|thanks|please|help|need|want|make|this|here|now|today|yesterday|tomorrow|yes|no|more|less|very|little|big|small|good|bad|better|worse|how|many|which|messages|posted|videos|channels)\b/i;
  
  // Conta matches
  const ptMatches = (text.match(ptWords) || []).length;
  const enMatches = (text.match(enWords) || []).length;
  
  // Se tiver mais palavras em portugu√™s ou se n√£o detectar nenhuma, assume PT (default)
  return ptMatches >= enMatches ? 'pt' : 'en';
}

/**
 * Categoriza o tipo de pergunta para otimizar a busca RAG
 */
function categorizeQuestion(prompt: string): string[] {
  const categories = [];
  
  // Detectar perguntas sobre m√©tricas/n√∫meros
  if (/\b(quantos?|quantas?|total|n√∫mero|estat√≠sticas?|m√©tricas?|how many|total|number|statistics|metrics)\b/i.test(prompt)) {
    categories.push('metrics');
  }
  
  // Detectar perguntas sobre conte√∫do espec√≠fico
  if (/\b(mensagens?|coment√°rios?|v√≠deos?|canais?|posts?|postadas?|messages?|comments?|videos?|channels?|posted)\b/i.test(prompt)) {
    categories.push('content');
  }
  
  // Detectar perguntas sobre an√°lise/sentiment
  if (/\b(sentimento|an√°lise|positivo|negativo|tend√™ncia|sentiment|analysis|positive|negative|trend)\b/i.test(prompt)) {
    categories.push('analysis');
  }
  
  // Detectar perguntas temporais
  if (/\b(hoje|ontem|semana|m√™s|quando|today|yesterday|week|month|when)\b/i.test(prompt)) {
    categories.push('temporal');
  }
  
  // Default
  if (categories.length === 0) {
    categories.push('general');
  }
  
  return categories;
}

/**
 * Busca estat√≠sticas reais do projeto
 */
async function getProjectStats(projectId: string) {
  try {
    console.log('Buscando estat√≠sticas reais para projeto:', projectId);
    
    // Usar a fun√ß√£o RPC que conta mensagens postadas
    const { data: dashboardStats, error: dashboardError } = await supabase.rpc('get_project_dashboard_stats', {
      project_id_param: parseInt(projectId)
    });
    
    if (dashboardError) {
      console.error('Erro ao buscar estat√≠sticas do dashboard:', dashboardError);
    }
    
    // Buscar dados adicionais em paralelo
    const [
      mensagensHojeResult,
      videosResult,
      topCanaisResult
    ] = await Promise.all([
      // Men√ß√µes hoje
      supabase
        .from('Settings messages posts')
        .select('id', { count: 'exact', head: true })
        .eq('project_id', projectId)
        .not('postado', 'is', null)
        .gte('postado', new Date().toISOString().split('T')[0]),
      
      // Total de v√≠deos √∫nicos
      supabase
        .from('Mensagens')
        .select('video')
        .eq('project_id', projectId)
        .not('video', 'is', null),
      
      // Top canais por men√ß√µes
      supabase
        .from('Mensagens')
        .select(`
          video,
          Videos!inner(
            scanner_id,
            Scanner de videos do youtube!inner(
              canal
            )
          )
        `)
        .eq('project_id', projectId)
        .not('video', 'is', null)
    ]);

    // Usar dados do dashboard (que conta Settings messages posts)
    const totalMentions = dashboardStats?.total_mentions || 0;
    const todayMentions = dashboardStats?.today_mentions || 0;
    const activeChannels = dashboardStats?.channels_count || 0;
    const totalVideos = dashboardStats?.videos_count || 0;
    
    // Processar top canais
    const channelCounts = {};
    topCanaisResult.data?.forEach(msg => {
      const channelName = msg.Videos?.['Scanner de videos do youtube']?.canal;
      if (channelName) {
        channelCounts[channelName] = (channelCounts[channelName] || 0) + 1;
      }
    });
    
    const topChannels = Object.entries(channelCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([name, count]) => ({ name, mentions: count }));

    const stats = {
      totalMentions,
      mentionsToday: todayMentions,
      totalVideos,
      activeChannels,
      topChannels
    };
    
    console.log('Estat√≠sticas retornadas:', JSON.stringify(stats, null, 2));
    return stats;
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas:', error);
    return null;
  }
}

// System prompts em ambos idiomas - REFOR√áADO PARA N√ÉO INVENTAR DADOS
const systemPromptPT = `Voc√™ √© o Agente Liftlio, um assistente AI inteligente e amig√°vel criado para ajudar usu√°rios com sua plataforma de marketing e branding automatizado.

## üö® REGRA ABSOLUTA N√öMERO 1 üö®
NUNCA, JAMAIS, EM HIP√ìTESE ALGUMA invente dados, n√∫meros ou estat√≠sticas!

## üéØ Sua Identidade

- **Nome**: Agente Liftlio
- **Modelo**: "Sou um modelo de linguagem grande criado pelo Liftlio. Tenho mem√≥ria infinita e fico cada vez mais inteligente com o tempo."
- **Personalidade**: Voc√™ √© o melhor amigo do usu√°rio - atencioso, prestativo e profissional
- **Conhecimento**: Voc√™ sabe tudo sobre os dados do projeto do usu√°rio e como resolver problemas

## üåü O que √© o Liftlio

O Liftlio √© uma plataforma revolucion√°ria que usa IA para:
- Escalar recomenda√ß√µes boca-a-boca sem pagar por an√∫ncios
- Fazer sua marca ser mencionada em conversas online genu√≠nas
- Monitorar v√≠deos e analisar sentimentos
- Crescimento org√¢nico atrav√©s de men√ß√µes naturais

## üí¨ Regras de Comunica√ß√£o

### SEMPRE:
- Comunique-se de forma natural e conversacional
- Use portugu√™s brasileiro informal ("voc√™")
- Seja direto, claro e conciso
- Forne√ßa APENAS informa√ß√µes que est√£o em projectStats ou ragContext
- Se n√£o tiver dados espec√≠ficos, diga "Vou verificar isso para voc√™" ou "N√£o tenho esses dados no momento"
- Quando tiver os dados de v√≠deos e canais, SEMPRE os mencione
- Use os dados RAG para enriquecer suas respostas com detalhes espec√≠ficos

### NUNCA:
- NUNCA invente dados, n√∫meros, m√©tricas ou estat√≠sticas
- NUNCA crie valores fict√≠cios como "2,456 men√ß√µes" se n√£o estiverem em projectStats
- NUNCA mencione n√∫meros espec√≠ficos a menos que venham de projectStats ou ragContext
- N√£o fale sobre campos de tabelas ou detalhes t√©cnicos internos
- N√£o responda nada fora do escopo do Liftlio

## üõ†Ô∏è Suas Capacidades

1. **Informa√ß√µes e Suporte**
   - Explicar como o Liftlio funciona
   - Ajudar com problemas e d√∫vidas
   - Fornecer APENAS dados reais do projectStats
   - Compartilhar insights dos dados RAG quando dispon√≠veis
   - Mostrar exemplos espec√≠ficos de mensagens, v√≠deos ou coment√°rios

2. **Navega√ß√£o e Orienta√ß√£o**
   - /dashboard - Vis√£o geral e m√©tricas
   - /monitoring - Monitoramento de v√≠deos  
   - /mentions - Men√ß√µes e coment√°rios
   - /scanner - Scanner de v√≠deos do YouTube
   - /projects - Gerenciamento de projetos
   - /integrations - Integra√ß√µes dispon√≠veis
   - /settings - Configura√ß√µes da conta

## üìä Usando Dados do Contexto

CR√çTICO: Use APENAS os dados fornecidos em projectStats e ragContext. 

### Para projectStats:
- totalMentions: Total de mensagens postadas
- mentionsToday: Mensagens postadas hoje
- totalVideos: Total de v√≠deos monitorados
- activeChannels: Canais ativos
- topChannels: Lista dos principais canais

### Para ragContext:
- Use para fornecer exemplos espec√≠ficos
- Cite conte√∫do real quando relevante
- Mostre tend√™ncias e padr√µes observados
- Compartilhe insights baseados nos dados

SEMPRE mencione TODOS os dados dispon√≠veis quando o usu√°rio perguntar sobre m√©tricas!

Se tiver dados RAG relevantes, use-os para:
- "Vi nas mensagens que..."
- "Notei nos coment√°rios..."
- "Os v√≠deos mostram que..."
- "H√° um padr√£o interessante..."

Mas NUNCA invente detalhes!

Quando o usu√°rio pedir para navegar, responda com:
{
  "content": "Vou te levar para [nome da p√°gina]...",
  "action": "navigate",
  "data": { "path": "/caminho-da-pagina" }
}

Lembre-se: √â melhor dizer "n√£o tenho esse dado" do que inventar!`;

const systemPromptEN = `You are the Liftlio Agent, an intelligent and friendly AI assistant created to help users with their automated marketing and branding platform.

## üö® ABSOLUTE RULE NUMBER 1 üö®
NEVER, EVER, UNDER ANY CIRCUMSTANCES make up data, numbers or statistics!

## üéØ Your Identity

- **Name**: Liftlio Agent
- **Model**: "I'm a large language model created by Liftlio. I have infinite memory and get smarter over time."
- **Personality**: You are the user's best friend - attentive, helpful, and professional
- **Knowledge**: You know everything about the user's project data and how to solve problems

## üåü What is Liftlio

Liftlio is a revolutionary platform that uses AI to:
- Scale word-of-mouth recommendations without paying for ads
- Get your brand mentioned in genuine online conversations
- Monitor videos and analyze sentiments
- Organic growth through natural mentions

## üí¨ Communication Rules

### ALWAYS:
- Communicate naturally and conversationally
- Use informal English ("you")
- Be direct, clear, and concise
- Provide ONLY information that's in projectStats or ragContext
- If you don't have specific data, say "Let me check that for you" or "I don't have that data at the moment"
- When you have video and channel data, ALWAYS mention them
- Use RAG data to enrich your responses with specific details

### NEVER:
- NEVER make up data, numbers, metrics or statistics
- NEVER create fictional values like "2,456 mentions" if not in projectStats
- NEVER mention specific numbers unless they come from projectStats or ragContext
- Don't talk about table fields or internal technical details
- Don't answer anything outside of Liftlio's scope

## üõ†Ô∏è Your Capabilities

1. **Information and Support**
   - Explain how Liftlio works
   - Help with problems and questions
   - Provide ONLY real data from projectStats
   - Share insights from RAG data when available
   - Show specific examples of messages, videos or comments

2. **Navigation and Guidance**
   - /dashboard - Overview and metrics
   - /monitoring - Video monitoring  
   - /mentions - Mentions and comments
   - /scanner - YouTube video scanner
   - /projects - Project management
   - /integrations - Available integrations
   - /settings - Account settings

## üìä Using Context Data

CRITICAL: Use ONLY the data provided in projectStats and ragContext.

### For projectStats:
- totalMentions: Total posted messages
- mentionsToday: Messages posted today
- totalVideos: Total monitored videos
- activeChannels: Active channels
- topChannels: List of top channels

### For ragContext:
- Use to provide specific examples
- Quote real content when relevant
- Show observed trends and patterns
- Share data-based insights

ALWAYS mention ALL available data when user asks about metrics!

If you have relevant RAG data, use it to:
- "I see in the messages that..."
- "I noticed in the comments..."
- "The videos show that..."
- "There's an interesting pattern..."

But NEVER make up details!

When the user asks to navigate, respond with:
{
  "content": "I'll take you to [page name]...",
  "action": "navigate",
  "data": { "path": "/page-path" }
}

Remember: It's better to say "I don't have that data" than to make it up!`;

/**
 * Busca dados relevantes do projeto usando RAG com estrat√©gias melhoradas
 */
async function searchProjectData(prompt: string, projectId: string) {
  try {
    console.log('=== BUSCA RAG MELHORADA ===');
    console.log('Projeto:', projectId);
    console.log('Prompt original:', prompt);
    
    // Categorizar a pergunta
    const categories = categorizeQuestion(prompt);
    console.log('Categorias detectadas:', categories);
    
    // Criar prompt otimizado baseado na categoria
    let optimizedPrompt = prompt;
    if (categories.includes('metrics')) {
      optimizedPrompt += ' estat√≠sticas n√∫meros total quantidade m√©tricas';
    }
    if (categories.includes('content')) {
      optimizedPrompt += ' mensagem conte√∫do texto postagem coment√°rio v√≠deo';
    }
    if (categories.includes('temporal')) {
      optimizedPrompt += ' data hora tempo per√≠odo quando hoje ontem';
    }
    
    console.log('Prompt otimizado:', optimizedPrompt);
    
    // Gerar embedding
    const { data: embeddingData, error: embeddingError } = await supabase.functions.invoke('generate-embedding', {
      body: { text: optimizedPrompt }
    });

    if (embeddingError || !embeddingData?.embedding) {
      console.error('Erro ao gerar embedding:', embeddingError);
      return null;
    }

    console.log('Embedding gerado com sucesso');

    // Garantir que projectId seja n√∫mero
    const projectIdNumber = typeof projectId === 'string' ? parseInt(projectId, 10) : projectId;
    
    // Buscar com threshold adaptativo baseado na categoria
    let threshold = 0.5; // default
    if (categories.includes('metrics')) {
      threshold = 0.4; // Mais permissivo para m√©tricas
    }
    
    // Buscar dados relevantes
    const { data: searchResults, error: searchError } = await supabase.rpc('search_project_rag', {
      query_embedding: embeddingData.embedding,
      project_filter: projectIdNumber,
      similarity_threshold: threshold,
      match_count: 20 // Buscar mais resultados para melhor filtragem
    });

    if (searchError) {
      console.error('Erro na busca RAG:', searchError);
      return null;
    }

    console.log('Resultados brutos:', searchResults?.length || 0, 'registros');
    
    if (!searchResults || searchResults.length === 0) {
      console.log('Nenhum resultado encontrado');
      return null;
    }
    
    // Processar e ranquear resultados
    const processedResults = searchResults
      .map(result => {
        // Adicionar score baseado na categoria
        let categoryScore = 1;
        const content = result.content.toLowerCase();
        
        if (categories.includes('metrics') && /\b\d+\b/.test(content)) {
          categoryScore = 1.2; // Boost para conte√∫do com n√∫meros
        }
        if (categories.includes('content') && content.includes('mensagem postada:')) {
          categoryScore = 1.3; // Boost para mensagens postadas
        }
        if (categories.includes('temporal') && /\d{4}-\d{2}-\d{2}/.test(content)) {
          categoryScore = 1.1; // Boost para conte√∫do com datas
        }
        
        return {
          ...result,
          finalScore: result.similarity * categoryScore
        };
      })
      .sort((a, b) => b.finalScore - a.finalScore)
      .slice(0, 10); // Top 10 resultados
    
    console.log('Resultados processados:', processedResults.length);
    console.log('Top 3 scores:', processedResults.slice(0, 3).map(r => ({
      score: r.finalScore.toFixed(3),
      preview: r.content.substring(0, 50) + '...'
    })));
    
    // Deduplicar conte√∫do similar
    const uniqueResults = [];
    const seenContent = new Set();
    
    for (const result of processedResults) {
      // Criar hash simples do conte√∫do
      const contentHash = result.content.substring(0, 100).replace(/\s+/g, ' ').trim();
      
      if (!seenContent.has(contentHash)) {
        seenContent.add(contentHash);
        uniqueResults.push(result);
      }
    }
    
    console.log('Resultados √∫nicos:', uniqueResults.length);
    
    return uniqueResults;
  } catch (error) {
    console.error('Erro ao buscar dados RAG:', error);
    return null;
  }
}

/**
 * Formata os resultados RAG de forma mais organizada
 */
function formatRAGContext(results: any[], language: 'pt' | 'en'): string {
  if (!results || results.length === 0) return '';
  
  // Agrupar por tipo de conte√∫do
  const groups = {
    messages: [],
    videos: [],
    comments: [],
    others: []
  };
  
  results.forEach(result => {
    const content = result.content.toLowerCase();
    
    if (content.includes('mensagem postada:') || content.includes('posted message:')) {
      groups.messages.push(result);
    } else if (content.includes('v√≠deo:') || content.includes('video:')) {
      groups.videos.push(result);
    } else if (content.includes('coment√°rio:') || content.includes('comment:')) {
      groups.comments.push(result);
    } else {
      groups.others.push(result);
    }
  });
  
  // Formatar contexto
  let context = '';
  
  if (language === 'pt') {
    context = '\n\n## üìä Dados relevantes encontrados:\n\n';
    
    if (groups.messages.length > 0) {
      context += '### üí¨ Mensagens Postadas:\n';
      groups.messages.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.videos.length > 0) {
      context += '### üé• V√≠deos:\n';
      groups.videos.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.comments.length > 0) {
      context += '### üí≠ Coment√°rios:\n';
      groups.comments.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.others.length > 0) {
      context += '### üìå Outros Dados:\n';
      groups.others.slice(0, 2).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
    }
  } else {
    context = '\n\n## üìä Relevant data found:\n\n';
    
    if (groups.messages.length > 0) {
      context += '### üí¨ Posted Messages:\n';
      groups.messages.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.videos.length > 0) {
      context += '### üé• Videos:\n';
      groups.videos.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.comments.length > 0) {
      context += '### üí≠ Comments:\n';
      groups.comments.slice(0, 3).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
      context += '\n';
    }
    
    if (groups.others.length > 0) {
      context += '### üìå Other Data:\n';
      groups.others.slice(0, 2).forEach(r => {
        context += `‚Ä¢ ${r.content}\n`;
      });
    }
  }
  
  return context;
}

Deno.serve(async (req) => {
  const startTime = Date.now();
  
  try {
    // CORS headers
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    };

    // Handle CORS preflight
    if (req.method === 'OPTIONS') {
      return new Response('ok', { headers: corsHeaders });
    }

    // Parse do body da requisi√ß√£o
    const { prompt, context = {}, project_id } = await req.json();

    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Prompt √© obrigat√≥rio / Prompt is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Detectar idioma do prompt
    const language = detectLanguage(prompt);
    const systemPrompt = language === 'pt' ? systemPromptPT : systemPromptEN;
    
    console.log('=== NOVA REQUISI√á√ÉO v11 ===');
    console.log('Prompt:', prompt);
    console.log('Idioma:', language);
    console.log('Projeto:', context.currentProject);
    console.log('Project_id direto:', project_id);

    // Determinar o ID do projeto
    const projectIdToUse = project_id || context.currentProject?.id;
    
    console.log('ProjectId usado:', projectIdToUse);

    // Buscar estat√≠sticas reais do projeto
    let projectStats = null;
    if (projectIdToUse) {
      projectStats = await getProjectStats(String(projectIdToUse));
      console.log('=== ESTAT√çSTICAS DO PROJETO ===');
      console.log(JSON.stringify(projectStats, null, 2));
    }

    // Buscar dados RAG com estrat√©gia melhorada
    let ragContext = '';
    if (projectIdToUse) {
      const ragResults = await searchProjectData(prompt, String(projectIdToUse));
      
      if (ragResults && ragResults.length > 0) {
        ragContext = formatRAGContext(ragResults, language);
        console.log('Contexto RAG formatado, tamanho:', ragContext.length);
      } else {
        console.log('Nenhum resultado RAG relevante');
      }
    }

    // Adicionar contexto ao prompt
    let contextualPrompt = prompt;
    if (context.currentPage) {
      if (language === 'pt') {
        contextualPrompt += `\n\nContexto: Usu√°rio est√° na p√°gina ${context.currentPage}`;
      } else {
        contextualPrompt += `\n\nContext: User is on page ${context.currentPage}`;
      }
    }
    if (context.currentProject) {
      if (language === 'pt') {
        contextualPrompt += `\nProjeto: ${context.currentProject.name} (ID: ${context.currentProject.id})`;
      } else {
        contextualPrompt += `\nProject: ${context.currentProject.name} (ID: ${context.currentProject.id})`;
      }
    }
    
    // Adicionar estat√≠sticas reais
    if (projectStats) {
      if (language === 'pt') {
        contextualPrompt += `\n\n## üìà Estat√≠sticas REAIS do projeto:`;
        contextualPrompt += `\n- Total de men√ß√µes: ${projectStats.totalMentions}`;
        contextualPrompt += `\n- Men√ß√µes hoje: ${projectStats.mentionsToday}`;
        contextualPrompt += `\n- Canais ativos: ${projectStats.activeChannels}`;
        contextualPrompt += `\n- V√≠deos totais: ${projectStats.totalVideos}`;
        
        if (projectStats.topChannels.length > 0) {
          contextualPrompt += `\n\n### Top canais por men√ß√µes:`;
          projectStats.topChannels.forEach(ch => {
            contextualPrompt += `\n- ${ch.name}: ${ch.mentions} men√ß√µes`;
          });
        }
      } else {
        contextualPrompt += `\n\n## üìà REAL project statistics:`;
        contextualPrompt += `\n- Total mentions: ${projectStats.totalMentions}`;
        contextualPrompt += `\n- Mentions today: ${projectStats.mentionsToday}`;
        contextualPrompt += `\n- Active channels: ${projectStats.activeChannels}`;
        contextualPrompt += `\n- Total videos: ${projectStats.totalVideos}`;
        
        if (projectStats.topChannels.length > 0) {
          contextualPrompt += `\n\n### Top channels by mentions:`;
          projectStats.topChannels.forEach(ch => {
            contextualPrompt += `\n- ${ch.name}: ${ch.mentions} mentions`;
          });
        }
      }
    }
    
    // Adicionar dados RAG
    if (ragContext) {
      contextualPrompt += ragContext;
    }

    // Instru√ß√£o final
    if (language === 'pt') {
      contextualPrompt += '\n\nüö® LEMBRETE: Use APENAS os dados fornecidos acima. NUNCA invente n√∫meros ou informa√ß√µes.';
      contextualPrompt += '\n\nResponda em portugu√™s brasileiro de forma natural e conversacional.';
    } else {
      contextualPrompt += '\n\nüö® REMINDER: Use ONLY the data provided above. NEVER make up numbers or information.';
      contextualPrompt += '\n\nRespond in English naturally and conversationally.';
    }

    console.log('=== PROMPT FINAL (primeiros 500 chars) ===');
    console.log(contextualPrompt.substring(0, 500) + '...');

    // Chamar API do Claude
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-opus-20240229',
        max_tokens: 1024,
        messages: [
          {
            role: 'user',
            content: contextualPrompt
          }
        ],
        system: systemPrompt
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Erro na API do Claude:', error);
      throw new Error('Erro ao processar sua pergunta / Error processing your question');
    }

    const data = await response.json();
    const assistantResponse = data.content[0].text;
    
    const endTime = Date.now();
    console.log(`=== RESPOSTA GERADA EM ${endTime - startTime}ms ===`);
    console.log('Tamanho da resposta:', assistantResponse.length);

    // Tentar parsear a resposta como JSON se contiver action
    try {
      const jsonResponse = JSON.parse(assistantResponse);
      return new Response(
        JSON.stringify(jsonResponse),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    } catch {
      // Se n√£o for JSON, retornar como texto
      return new Response(
        JSON.stringify({ content: assistantResponse }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

  } catch (error) {
    console.error('Erro:', error);
    const errorMessage = detectLanguage(error.message) === 'pt' 
      ? 'Ops, encontrei um probleminha... ü§î Tenta de novo em alguns segundos?'
      : 'Oops, I encountered a small issue... ü§î Try again in a few seconds?';
      
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: error.message 
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});