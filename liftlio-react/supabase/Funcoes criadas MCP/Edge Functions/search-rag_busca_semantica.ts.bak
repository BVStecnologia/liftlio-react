/**
 * search-rag
 * 
 * Edge Function para buscar conteúdo similar no sistema RAG
 * Usa embeddings para busca semântica com isolamento por projeto
 * 
 * Criado via MCP em: 11/01/2025
 * 
 * @param {Object} req.body
 * @param {string} req.body.query - Texto da busca
 * @param {number} req.body.project_id - ID do projeto (obrigatório)
 * @param {number} [req.body.limit=5] - Número máximo de resultados
 * @param {number} [req.body.threshold=0.7] - Similaridade mínima (0-1)
 * 
 * @returns {Object} Resultados da busca semântica
 * 
 * Funcionalidades:
 * - Gera embedding da query usando OpenAI
 * - Busca vetores similares no projeto específico
 * - Retorna conteúdo relevante com score de similaridade
 * - Mantém isolamento total entre projetos
 * 
 * Exemplo de uso:
 * POST /search-rag
 * {
 *   "query": "Como configurar integração YouTube",
 *   "project_id": 71,
 *   "limit": 5
 * }
 */

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const openaiKey = Deno.env.get('OPENAI_API_KEY')!

serve(async (req) => {
  try {
    const { query, project_id, limit = 5, threshold = 0.7 } = await req.json()
    
    if (!query) {
      return new Response(
        JSON.stringify({ error: 'Query é obrigatória' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    if (!project_id) {
      return new Response(
        JSON.stringify({ error: 'project_id é obrigatório' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // Validar projeto
    const allowedProjects = [58, 71]
    if (!allowedProjects.includes(project_id)) {
      return new Response(
        JSON.stringify({ error: 'Projeto não autorizado' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      )
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Gerar embedding da query
    const embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        input: query,
        model: 'text-embedding-3-small'
      })
    })

    const embeddingData = await embeddingResponse.json()
    const queryEmbedding = embeddingData.data[0].embedding

    // Buscar embeddings similares
    const { data: results, error } = await supabase.rpc('search_rag_embeddings', {
      query_embedding: queryEmbedding,
      similarity_threshold: threshold,
      match_count: limit,
      filter_metadata: { project_id }
    })

    if (error) {
      console.error('Erro ao buscar embeddings:', error)
      return new Response(
        JSON.stringify({ error: 'Erro na busca', details: error }),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // Enriquecer resultados com informações da fonte
    const enrichedResults = results?.map(r => ({
      ...r,
      source: `${r.source_table}#${r.source_id}`,
      relevance: Math.round(r.similarity * 100) + '%'
    })) || []

    return new Response(
      JSON.stringify({
        success: true,
        query,
        project_id,
        results: enrichedResults,
        total: enrichedResults.length,
        tokens_used: embeddingData.usage?.total_tokens
      }),
      { headers: { 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Erro geral:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
})