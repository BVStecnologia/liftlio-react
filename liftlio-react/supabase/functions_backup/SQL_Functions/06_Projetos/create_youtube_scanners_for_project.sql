-- =============================================
-- Função: create_youtube_scanners_for_project
-- Descrição: Cria scanners do YouTube para um projeto
-- Criado: 2025-01-24
-- Atualizado: Múltiplas versões para bigint e integer
-- =============================================

-- Versão para bigint
CREATE OR REPLACE FUNCTION public.create_youtube_scanners_for_project(project_id bigint)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    keywords TEXT;
    keyword TEXT;
    scanner_id BIGINT;
BEGIN
    -- Buscar as keywords do projeto
    SELECT "Keywords" INTO keywords FROM public."Projeto" WHERE id = project_id;

    -- Verifica se a tabela "Scanner de videos do youtube" existe, se não, cria
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'Scanner de videos do youtube') THEN
        EXECUTE '
        CREATE TABLE public."Scanner de videos do youtube" (
            id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            "ID cache videos" CHARACTER VARYING,
            "ID Verificado" CHARACTER VARYING,
            "iniciar adição de id de comentario" CHARACTER VARYING,
            "Keyword" CHARACTER VARYING,
            "Ler videos" TEXT,
            "Palavras chaves novas" CHARACTER VARYING,
            "Palavras chaves verificadas" CHARACTER VARYING,
            "Ultimo keyword" CHARACTER VARYING,
            "Videos" BIGINT,
            CONSTRAINT "Scanner de videos do youtube_pkey" PRIMARY KEY (id),
            CONSTRAINT "Scanner de videos do youtube_Videos_fkey" FOREIGN KEY ("Videos") REFERENCES "Videos" (id) ON UPDATE CASCADE ON DELETE CASCADE
        )';
    END IF;

    -- Itera sobre as palavras-chave do projeto
    FOR keyword IN SELECT unnest(string_to_array(keywords, ',')) LOOP
        keyword := trim(keyword);
        -- Verifica se já existe um scanner para esta palavra-chave
        IF NOT EXISTS (SELECT 1 FROM public."Scanner de videos do youtube" WHERE "Keyword" = keyword) THEN
            -- Se não existe, insere um novo registro
            INSERT INTO public."Scanner de videos do youtube" ("Keyword")
            VALUES (keyword)
            RETURNING id INTO scanner_id;

            -- Adiciona a relação na tabela Projeto_Scanner
            INSERT INTO "Projeto_Scanner" (projeto_id, scanner_id)
            VALUES (project_id, scanner_id);
        ELSE
            -- Se já existe, obtém o ID do scanner existente
            SELECT id INTO scanner_id
            FROM public."Scanner de videos do youtube"
            WHERE "Keyword" = keyword;

            -- Verifica se a relação já existe na tabela Projeto_Scanner
            IF NOT EXISTS (SELECT 1 FROM "Projeto_Scanner" WHERE projeto_id = project_id AND scanner_id = scanner_id) THEN
                -- Se não existe, adiciona a relação
                INSERT INTO "Projeto_Scanner" (projeto_id, scanner_id)
                VALUES (project_id, scanner_id);
            END IF;
        END IF;
    END LOOP;
END;
$function$

-- Versão para integer
CREATE OR REPLACE FUNCTION public.create_youtube_scanners_for_project(project_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    keyword_record RECORD;
BEGIN
    -- Verifica se a tabela "Scanner de videos do youtube" existe, se não, cria
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'Scanner de videos do youtube') THEN
        EXECUTE '
        CREATE TABLE public."Scanner de videos do youtube" (
            id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            "ID cache videos" CHARACTER VARYING,
            "ID Verificado" CHARACTER VARYING,
            "iniciar adição de id de comentario" CHARACTER VARYING,
            "Keyword" CHARACTER VARYING,
            "Ler videos" TEXT,
            "Palavras chaves novas" CHARACTER VARYING,
            "Palavras chaves verificadas" CHARACTER VARYING,
            "Ultimo keyword" CHARACTER VARYING,
            "Videos" BIGINT,
            CONSTRAINT "Scanner de videos do youtube_pkey" PRIMARY KEY (id),
            CONSTRAINT "Scanner de videos do youtube_Videos_fkey" FOREIGN KEY ("Videos") REFERENCES "Videos" (id) ON UPDATE CASCADE ON DELETE CASCADE
        )';
    END IF;

    -- Itera sobre as palavras-chave do projeto
    FOR keyword_record IN SELECT * FROM get_keywords_as_list(project_id) LOOP
        -- Verifica se já existe um scanner para esta palavra-chave
        IF NOT EXISTS (SELECT 1 FROM public."Scanner de videos do youtube" WHERE "Keyword" = keyword_record.keyword) THEN
            -- Se não existe, insere um novo registro
            INSERT INTO public."Scanner de videos do youtube" ("Keyword")
            VALUES (keyword_record.keyword);
        END IF;
    END LOOP;
END;
$function$