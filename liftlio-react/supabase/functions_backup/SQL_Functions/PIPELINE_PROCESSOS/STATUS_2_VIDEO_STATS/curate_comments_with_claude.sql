-- =============================================
-- Fun√ß√£o: curate_comments_with_claude
-- Descri√ß√£o: Usa Claude AI para curar os 100 melhores coment√°rios e selecionar
--            quantidade ADAPTATIVA baseada em l√≥gica anti-spam
-- Criado: 2025-10-27
-- Atualizado: 2025-10-27 - Adicionada l√≥gica anti-spam adaptativa
-- Depend√™ncias: get_filtered_comments(), claude_complete()
-- =============================================

DROP FUNCTION IF EXISTS curate_comments_with_claude(bigint);

CREATE OR REPLACE FUNCTION public.curate_comments_with_claude(video_id_param bigint)
RETURNS jsonb
LANGUAGE plpgsql
AS $function$
DECLARE
    v_filtered_comments jsonb;
    v_video_data jsonb;
    v_project_data jsonb;
    v_prompt text;
    v_claude_response text;
    v_result jsonb;
    v_total_original integer;
    v_total_filtrados integer;
    v_max_respostas integer;
    v_taxa_resposta numeric;
BEGIN
    -- 1. Buscar dados do v√≠deo (incluindo comment_count total)
    SELECT jsonb_build_object(
        'video_id', v.id,
        'youtube_id', v."VIDEO",
        'title', v.video_title,
        'description', COALESCE(v.video_description, 'Sem descri√ß√£o'),
        'view_count', v.view_count,
        'like_count', v.like_count,
        'comment_count', v.comment_count,
        'transcript', COALESCE(
            (SELECT LEFT(vt.trancription, 3000)
             FROM "Videos_trancricao" vt
             WHERE vt.id = v.transcript),
            'Transcri√ß√£o n√£o dispon√≠vel'
        )
    ), v.comment_count
    INTO v_video_data, v_total_original
    FROM "Videos" v
    WHERE v.id = video_id_param;

    -- 2. Buscar os 100 coment√°rios j√° filtrados pela fun√ß√£o get_filtered_comments
    SELECT jsonb_agg(
        jsonb_build_object(
            'comment_id', comment_id,
            'youtube_id', comment_youtube_id,
            'text', comment_text,
            'author', comment_author,
            'published_at', comment_published_at,
            'likes', comment_likes,
            'score', comment_relevance_score,
            'age_days', EXTRACT(DAY FROM NOW() - comment_published_at)::integer
        ) ORDER BY comment_relevance_score DESC
    )
    INTO v_filtered_comments
    FROM get_filtered_comments(video_id_param);

    -- Se n√£o houver coment√°rios, retornar NULL
    IF v_filtered_comments IS NULL OR jsonb_array_length(v_filtered_comments) = 0 THEN
        RAISE NOTICE 'Nenhum coment√°rio filtrado encontrado para v√≠deo %', video_id_param;
        RETURN jsonb_build_object(
            'error', 'no_comments',
            'message', 'Nenhum coment√°rio dispon√≠vel para curadoria'
        );
    END IF;

    v_total_filtrados := jsonb_array_length(v_filtered_comments);

    -- 3. L√ìGICA ANTI-SPAM: Calcular quantidade m√°xima de respostas baseada no total ORIGINAL
    v_max_respostas := CASE
        -- TIER 1: V√≠deos MICRO (<15) - SUPER seletivo (15%)
        WHEN v_total_original < 15 THEN
            GREATEST(1, CEIL(v_total_original * 0.15))

        -- TIER 2: V√≠deos PEQUENOS (15-50) - Seletivo (12%)
        WHEN v_total_original BETWEEN 15 AND 50 THEN
            GREATEST(2, CEIL(v_total_original * 0.12))

        -- TIER 3: V√≠deos M√âDIOS (51-150) - Normal (10%)
        WHEN v_total_original BETWEEN 51 AND 150 THEN
            GREATEST(5, CEIL(v_total_original * 0.10))

        -- TIER 4: V√≠deos GRANDES (151-300) - Seletivo (8%, max 10)
        WHEN v_total_original BETWEEN 151 AND 300 THEN
            LEAST(10, CEIL(v_total_original * 0.08))

        -- TIER 5: V√≠deos VIRAIS (301+) - Muito seletivo (5%, max 10)
        ELSE
            LEAST(10, CEIL(v_total_original * 0.05))
    END;

    v_taxa_resposta := ROUND((v_max_respostas::numeric / NULLIF(v_total_original, 0) * 100), 1);

    RAISE NOTICE 'üìä Anti-Spam Logic: V√≠deo com % coment√°rios totais | % filtrados | Max % respostas (% %% taxa)',
                 v_total_original, v_total_filtrados, v_max_respostas, v_taxa_resposta;

    -- 4. PROTE√á√ÉO: Se filtrados <= max_respostas, retorna TODOS sem chamar Claude (economia!)
    IF v_total_filtrados <= v_max_respostas THEN
        RAISE NOTICE '‚úÖ Economia: Filtrados (%) <= Max respostas (%), retornando TODOS sem Claude',
                     v_total_filtrados, v_max_respostas;

        -- Retorna todos filtrados formatados como curados (sem gastar com Claude)
        RETURN jsonb_build_object(
            'video_id', video_id_param,
            'video_title', v_video_data->>'title',
            'product_name', NULL,  -- Ser√° preenchido depois se necess√°rio
            'total_comments_original', v_total_original,
            'total_comments_analyzed', v_total_filtrados,
            'top_comments_selected', v_total_filtrados,
            'response_rate_percent', v_taxa_resposta,
            'curation_mode', 'all_filtered_auto_approved',
            'message', format('V√≠deo com %s coment√°rios - retornados todos %s filtrados (taxa %s%%) sem curadoria Claude',
                            v_total_original, v_total_filtrados, v_taxa_resposta),
            'curated_at', NOW(),
            'curated_comments', (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'comment_id', (elem->>'comment_id')::bigint,
                        'rank', row_number() OVER (ORDER BY (elem->>'score')::float DESC),
                        'score_total', (elem->>'score')::float,
                        'text', elem->>'text',
                        'author', elem->>'author',
                        'published_at', elem->>'published_at',
                        'likes', (elem->>'likes')::integer,
                        'age_days', (elem->>'age_days')::integer,
                        'reasoning', 'Auto-aprovado: V√≠deo pequeno com poucos coment√°rios filtrados',
                        'estrategia_sugerida', 'Responder de forma personalizada baseada no contexto',
                        'red_flags', NULL
                    )
                )
                FROM jsonb_array_elements(v_filtered_comments) elem
            )
        );
    END IF;

    RAISE NOTICE 'ü§ñ Chamando Claude: Filtrados (%) > Max respostas (%), selecionando top %',
                 v_total_filtrados, v_max_respostas, v_max_respostas;

    -- 6. Buscar dados do projeto (produto/servi√ßo)
    SELECT jsonb_build_object(
        'project_id', p.id,
        'product_name', COALESCE(
            SUBSTRING(p."description service" FROM 'Company or product name: ([^,]+)'),
            p."Project name",
            'Nome n√£o especificado'
        ),
        'description', COALESCE(p."description service", 'Descri√ß√£o n√£o dispon√≠vel'),
        'keywords', COALESCE(p."Keywords", ''),
        'country', COALESCE(p."Pa√≠s", 'Portugu√™s')
    )
    INTO v_project_data
    FROM "Videos" v
    JOIN "Scanner de videos do youtube" s ON v.scanner_id = s.id
    JOIN "Projeto" p ON s."Projeto_id" = p.id
    WHERE v.id = video_id_param;

    -- Se n√£o encontrou projeto, usar dados gen√©ricos
    IF v_project_data IS NULL THEN
        v_project_data := jsonb_build_object(
            'project_id', NULL,
            'product_name', 'Produto/Servi√ßo gen√©rico',
            'description', 'Sem descri√ß√£o dispon√≠vel',
            'keywords', '',
            'country', 'Portugu√™s'
        );
    END IF;

    -- 7. Construir prompt para Claude com quantidade ADAPTATIVA
    v_prompt := format(
        'Voc√™ √© um especialista em curadoria de coment√°rios do YouTube para estrat√©gias de marketing e engajamento.

CONTEXTO DO V√çDEO:
T√≠tulo: %s
Descri√ß√£o: %s
Visualiza√ß√µes: %s | Likes: %s | Coment√°rios totais: %s
Transcri√ß√£o (primeiros 3000 caracteres): %s

CONTEXTO DO PRODUTO/SERVI√áO:
Nome: %s
Descri√ß√£o: %s
Palavras-chave: %s

COMENT√ÅRIOS FILTRADOS (j√° passou por filtro SQL):
Total dispon√≠vel: %s coment√°rios
%s

üéØ L√ìGICA ANTI-SPAM ATIVADA:
- V√≠deo tem %s coment√°rios no total
- Voc√™ est√° analisando %s coment√°rios pr√©-filtrados
- Selecione APENAS %s coment√°rios (taxa de resposta %s%%)
- Esta taxa mant√©m comportamento natural e evita detec√ß√£o de spam

SUA MISS√ÉO:
Analise os coment√°rios acima e selecione os TOP %s coment√°rios mais estrat√©gicos para responder.

CRIT√âRIOS DE SELE√á√ÉO (em ordem de prioridade):

1. **ALINHAMENTO COM PRODUTO** (40 pontos):
   - Coment√°rio demonstra necessidade/problema que o produto resolve?
   - H√° conex√£o genu√≠na com as keywords do produto?
   - Pessoa est√° buscando solu√ß√£o ativa?

2. **TIMING E VISIBILIDADE** (30 pontos):
   - Coment√°rios de 14-30 dias t√™m prioridade (sweet spot)
   - √ìrf√£os (sem respostas) s√£o ouro (visibilidade 100%%)
   - Coment√°rios muito recentes (<7 dias) ou muito velhos (>60 dias) s√£o menos priorit√°rios

3. **QUALIDADE DO CONTEXTO** (20 pontos):
   - Coment√°rio √© espec√≠fico e detalhado?
   - Permite resposta personalizada e de valor?
   - Tom receptivo a sugest√µes?

4. **POTENCIAL DE CONVERS√ÉO** (10 pontos):
   - Sinais de inten√ß√£o de compra ("onde compro", "quanto custa", "preciso urgente")?
   - Pessoa parece ter or√ßamento/autoridade?
   - Urg√™ncia alta, m√©dia ou baixa?

REGRAS IMPORTANTES:
- Priorize QUALIDADE sobre quantidade
- Evite coment√°rios gen√©ricos ("legal", "bom v√≠deo")
- Evite coment√°rios sobre outros produtos/concorrentes
- Selecione EXATAMENTE %s coment√°rios (n√£o mais, n√£o menos)
- Se n√£o houver %s coment√°rios realmente bons, selecione os melhores dispon√≠veis

OUTPUT:
Retorne JSON array com top %s coment√°rios no formato:
[
  {
    "comment_id": "id do coment√°rio",
    "rank": 1,
    "score_total": 95,
    "scores": {
      "alinhamento": 38,
      "timing_visibilidade": 28,
      "qualidade_contexto": 19,
      "potencial_conversao": 10
    },
    "reasoning": "Explica√ß√£o detalhada em portugu√™s do por qu√™ esse coment√°rio foi selecionado",
    "estrategia_sugerida": "Sugest√£o de como responder (ex: ''Oferecer case study + trial gratuito'')",
    "red_flags": "Avisos se houver (ex: ''Pessoa pode estar comparando com concorrente X'')"
  }
]

Responda APENAS com o JSON array, sem texto adicional.',
        -- Dados do v√≠deo
        v_video_data->>'title',
        v_video_data->>'description',
        v_video_data->>'view_count',
        v_video_data->>'like_count',
        v_video_data->>'comment_count',
        v_video_data->>'transcript',
        -- Dados do produto
        v_project_data->>'product_name',
        v_project_data->>'description',
        v_project_data->>'keywords',
        -- Dados dos coment√°rios
        jsonb_array_length(v_filtered_comments),
        (SELECT string_agg(
            format(
                E'---\nComment ID: %s\nAuthor: %s\nAge: %s days\nLikes: %s\nSQL Score: %s\nText: %s',
                c->>'comment_id',
                c->>'author',
                c->>'age_days',
                c->>'likes',
                c->>'score',
                c->>'text'
            ),
            E'\n\n'
        ) FROM jsonb_array_elements(v_filtered_comments) c),
        -- Dados anti-spam
        v_total_original,
        v_total_filtrados,
        v_max_respostas,
        v_taxa_resposta,
        v_max_respostas,
        -- Repetir v_max_respostas para as 3 men√ß√µes no prompt
        v_max_respostas,
        v_max_respostas,
        v_max_respostas
    );

    -- 8. Chamar Claude
    SELECT claude_complete(
        v_prompt,
        format('You are an expert in YouTube comment curation for marketing strategies.

CRITICAL RULES:
1. You MUST return a valid JSON array
2. Select EXACTLY %s most strategic comments (anti-spam logic)
3. Prioritize quality over quantity
4. Each comment must have detailed reasoning
5. Scores must be realistic and justified
6. Return exactly %s comments, no more, no less

Language: %s

Always respond exactly in this structure:
[
  {
    "comment_id": "ID",
    "rank": 1,
    "score_total": 95,
    "scores": {
      "alinhamento": 38,
      "timing_visibilidade": 28,
      "qualidade_contexto": 19,
      "potencial_conversao": 10
    },
    "reasoning": "Detailed explanation in Portuguese",
    "estrategia_sugerida": "Response strategy suggestion",
    "red_flags": "Warnings if any"
  }
]

Respond only with the requested JSON array.',
               v_max_respostas,
               v_max_respostas,
               v_project_data->>'country'),
        8000,  -- max_tokens (an√°lise detalhada)
        0.3    -- temperature (mais focado)
    ) INTO v_claude_response;

    -- 6. Validar resposta do Claude
    IF v_claude_response IS NULL THEN
        RAISE NOTICE 'Claude retornou NULL';
        RETURN jsonb_build_object(
            'error', 'claude_null',
            'message', 'Claude n√£o retornou resposta'
        );
    END IF;

    -- 7. Converter resposta para JSONB (limpar markdown se necess√°rio)
    BEGIN
        v_claude_response := regexp_replace(v_claude_response, '^\s*```json\s*', '', 'i');
        v_claude_response := regexp_replace(v_claude_response, '\s*```\s*$', '');
        v_claude_response := trim(v_claude_response);
        v_result := v_claude_response::jsonb;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Erro ao converter resposta do Claude: %', SQLERRM;
        RETURN jsonb_build_object(
            'error', 'invalid_json',
            'message', 'Resposta do Claude n√£o √© JSON v√°lido',
            'raw_response', v_claude_response
        );
    END;

    -- 9. Enriquecer resultado com metadados (incluindo dados anti-spam)
    v_result := jsonb_build_object(
        'video_id', video_id_param,
        'video_title', v_video_data->>'title',
        'product_name', v_project_data->>'product_name',
        'total_comments_original', v_total_original,
        'total_comments_analyzed', v_total_filtrados,
        'top_comments_selected', jsonb_array_length(v_result),
        'response_rate_percent', v_taxa_resposta,
        'max_safe_responses', v_max_respostas,
        'curation_mode', 'claude_adaptive',
        'curated_at', NOW(),
        'curated_comments', v_result
    );

    RETURN v_result;

EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erro na fun√ß√£o curate_comments_with_claude: % %', SQLERRM, SQLSTATE;
        RETURN jsonb_build_object(
            'error', SQLERRM,
            'sqlstate', SQLSTATE
        );
END;
$function$;

-- =============================================
-- EXEMPLO DE USO:
-- =============================================
-- SELECT curate_comments_with_claude(28591);
--
-- Retorna JSON com coment√°rios curados (quantidade adaptativa anti-spam):
-- {
--   "video_id": 28591,
--   "video_title": "Como fazer...",
--   "product_name": "MinhaFerramenta",
--   "total_comments_original": 50,
--   "total_comments_analyzed": 30,
--   "top_comments_selected": 6,
--   "response_rate_percent": 12.0,
--   "max_safe_responses": 6,
--   "curation_mode": "claude_adaptive",
--   "curated_at": "2025-10-27T...",
--   "curated_comments": [
--     {
--       "comment_id": "abc123",
--       "rank": 1,
--       "score_total": 95,
--       "scores": {...},
--       "reasoning": "...",
--       "estrategia_sugerida": "...",
--       "red_flags": null
--     },
--     ...
--   ]
-- }
--
-- L√ìGICA ANTI-SPAM:
-- - V√≠deo 10 coment√°rios ‚Üí max 2 respostas (20%)
-- - V√≠deo 50 coment√°rios ‚Üí max 6 respostas (12%)
-- - V√≠deo 100 coment√°rios ‚Üí max 10 respostas (10%)
-- - V√≠deo 500 coment√°rios ‚Üí max 10 respostas (2%)
-- =============================================
