/**
 * Edge Function: Agente Liftlio v62 - SIMPLIFICADO
 * 
 * Vers√£o simplificada sem tabelas extras
 * Usa apenas as fun√ß√µes RPC j√° criadas
 */

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const claudeApiKey = Deno.env.get('CLAUDE_API_KEY')!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Mapeamento direto de inten√ß√µes para fun√ß√µes RPC
const INTENT_TO_RPC = {
  'daily_status': 'get_daily_briefing',
  'list_channels': 'get_all_channels_stats',
  'project_status': 'get_project_quick_status',
  'performance': 'analyze_channel_performance',
  'engagement': 'get_engagement_metrics',
  'today_posts': 'get_posts_by_date',
  'scheduled_posts': 'get_scheduled_posts'
};

// Padr√µes para detectar inten√ß√µes
const INTENT_PATTERNS = {
  daily_status: /como estamos|status hoje|resumo do dia|como est√°|briefing/i,
  list_channels: /listar canais|todos os canais|quais canais|mostrar canais/i,
  project_status: /status do projeto|informa√ß√µes do projeto/i,
  performance: /performance|desempenho|an√°lise|m√©tricas/i,
  engagement: /engajamento|curtidas|coment√°rios|visualiza√ß√µes/i,
  today_posts: /posts de hoje|postagens hoje|o que foi postado/i,
  scheduled_posts: /posts agendados|agendamentos|pr√≥ximos posts/i
};

// Detecta inten√ß√£o do usu√°rio
function detectIntent(prompt: string): { intent: string; confidence: number } {
  const lowerPrompt = prompt.toLowerCase();
  
  for (const [intent, pattern] of Object.entries(INTENT_PATTERNS)) {
    if (pattern.test(lowerPrompt)) {
      return { intent, confidence: 0.9 };
    }
  }
  
  // Se pergunta curta com "?", assume daily_status
  if (lowerPrompt.length < 20 && lowerPrompt.includes('?')) {
    return { intent: 'daily_status', confidence: 0.7 };
  }
  
  return { intent: 'general', confidence: 0.5 };
}

// Formata resposta baseada nos dados
function formatResponse(intent: string, data: any): string {
  if (!data || (Array.isArray(data) && data.length === 0)) {
    return "Nenhum dado dispon√≠vel no momento.";
  }
  
  switch (intent) {
    case 'daily_status':
      if (Array.isArray(data)) {
        const lines = data.map(item => 
          `${item.trend} **${item.metric_name}**: ${item.value}`
        );
        return `üìä **Resumo de hoje:**\n${lines.join('\n')}`;
      }
      break;
      
    case 'list_channels':
      if (Array.isArray(data)) {
        const header = `üì∫ **${data.length} canais monitorados:**`;
        const channels = data.slice(0, 5).map(ch => 
          `‚Ä¢ **${ch.channel_name}** (${ch.subscriber_count} subs)`
        );
        if (data.length > 5) {
          channels.push(`... e mais ${data.length - 5} canais`);
        }
        return `${header}\n${channels.join('\n')}`;
      }
      break;
      
    case 'performance':
      if (Array.isArray(data)) {
        const metrics = data.map(item => 
          `‚Ä¢ **${item.metric}**: ${item.value}`
        );
        return `üìà **An√°lise de Performance:**\n${metrics.join('\n')}`;
      }
      break;
      
    case 'engagement':
      if (Array.isArray(data)) {
        const metrics = data.map(item => 
          `${item.emoji} **${item.engagement_type}**: ${item.total_count.toLocaleString()}`
        );
        return `üí´ **M√©tricas de Engajamento:**\n${metrics.join('\n')}`;
      }
      break;
  }
  
  // Fallback para formato gen√©rico
  return JSON.stringify(data, null, 2);
}

// Handler principal
Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { prompt, context } = await req.json();
    
    if (!prompt) {
      throw new Error('Prompt √© obrigat√≥rio');
    }

    const projectId = context?.currentProject?.id ? parseInt(context.currentProject.id) : 58;
    
    // Detectar inten√ß√£o
    const { intent, confidence } = detectIntent(prompt);
    console.log('Intent:', intent, 'Confidence:', confidence);
    
    let response: string;
    
    // Se detectou inten√ß√£o com alta confian√ßa, usar RPC
    if (confidence > 0.6 && intent !== 'general') {
      const rpcName = INTENT_TO_RPC[intent];
      
      if (rpcName) {
        try {
          // Preparar par√¢metros
          const params: any = { p_project_id: projectId };
          
          // Adicionar par√¢metros espec√≠ficos conforme necess√°rio
          if (intent === 'list_channels') {
            params.p_limit = 10;
          } else if (intent === 'performance') {
            params.p_days = 7;
          } else if (intent === 'scheduled_posts') {
            params.p_days_ahead = 7;
          }
          
          console.log(`Calling RPC ${rpcName} with params:`, params);
          
          // Chamar RPC
          const { data, error } = await supabase.rpc(rpcName, params);
          
          if (error) {
            console.error('RPC error:', error);
            throw error;
          }
          
          console.log('RPC result:', data);
          
          // Formatar resposta
          response = formatResponse(intent, data);
        } catch (error) {
          console.error('Error executing RPC:', error);
          // Fallback para Claude
          response = await callClaude(prompt);
        }
      } else {
        response = await callClaude(prompt);
      }
    } else {
      // Usar Claude para perguntas gerais
      response = await callClaude(prompt);
    }
    
    return new Response(
      JSON.stringify({ 
        response,
        intent,
        confidence
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );

  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        response: "Desculpe, ocorreu um erro. Tente novamente."
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );
  }
});

// Fun√ß√£o auxiliar para chamar Claude
async function callClaude(prompt: string): Promise<string> {
  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': claudeApiKey,
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-sonnet-4-20250514',
      max_tokens: 300,
      messages: [{
        role: 'user',
        content: prompt
      }],
      system: `Voc√™ √© o assistente AI do Liftlio. Seja EXTREMAMENTE conciso.
M√°ximo 3 linhas. Use markdown. V√° direto ao ponto.`
    })
  });
  
  if (!response.ok) {
    throw new Error(`Claude API error: ${response.status}`);
  }
  
  const data = await response.json();
  return data.content[0].text;
}