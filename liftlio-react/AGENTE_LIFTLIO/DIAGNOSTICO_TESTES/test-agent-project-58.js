// üß™ BATERIA COMPLETA DE TESTES - PROJETO 58 (HW)
// Testa TODOS os aspectos: mem√≥ria, contexto, RAG, dados reais
// v26 - UUID Fix + Mem√≥ria Robusta

const SUPABASE_URL = 'https://suqjifkhmekcdflwowiw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN1cWppZmtobWVrY2RmbHdvd2l3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjY1MDkzNDQsImV4cCI6MjA0MjA4NTM0NH0.ajtUy21ib_z5O6jWaAYwZ78_D5Om_cWra5zFq-0X-3I';

// Projeto 58 - HW (projeto real com dados)
const PROJECT_ID = '58';
const PROJECT_NAME = 'HW';

// Configura√ß√£o de teste
const TEST_SESSION = 'proj58-test-' + Date.now();
const TEST_USER = 'test-user-' + Date.now();

// Cores para output
const colors = {
    reset: '\x1b[0m',
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    bgRed: '\x1b[41m',
    bgGreen: '\x1b[42m',
    bgYellow: '\x1b[43m'
};

function log(message, color = 'reset') {
    const timestamp = new Date().toLocaleTimeString('pt-BR');
    console.log(`${colors.cyan}[${timestamp}]${colors.reset} ${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
    console.log('\n' + '‚ïê'.repeat(60));
    log(` ${title} `, 'magenta');
    console.log('‚ïê'.repeat(60));
}

function logTest(name, description) {
    log(`\nüìã ${name}`, 'yellow');
    if (description) log(`   ${description}`, 'white');
}

// Fun√ß√£o principal de teste
async function testAgent(prompt, options = {}) {
    const {
        context = {},
        expectedInResponse = [],
        testName = 'Teste',
        checkRAG = false,
        checkMemory = false,
        logResponse = true
    } = options;
    
    logTest(testName, prompt);
    
    try {
        const startTime = Date.now();
        
        // Adicionar contexto do projeto 58
        const fullContext = {
            ...context,
            currentProject: {
                id: PROJECT_ID,
                name: PROJECT_NAME
            }
        };
        
        const response = await fetch(`${SUPABASE_URL}/functions/v1/agente-liftlio`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
            },
            body: JSON.stringify({
                prompt,
                context: fullContext,
                userId: TEST_USER,
                sessionId: TEST_SESSION
            })
        });

        const elapsedTime = Date.now() - startTime;
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(`HTTP ${response.status}: ${JSON.stringify(error)}`);
        }

        const data = await response.json();
        
        if (data.response) {
            if (logResponse) {
                log(`   ‚è±Ô∏è  Tempo: ${elapsedTime}ms`, 'cyan');
                log(`   üì• Resposta: "${data.response.substring(0, 150)}..."`, 'green');
            }
            
            // Verificar conte√∫do esperado
            const results = {
                success: true,
                response: data.response,
                metadata: data.metadata,
                elapsedTime,
                checks: {}
            };
            
            // Verificar palavras esperadas
            if (expectedInResponse.length > 0) {
                let allFound = true;
                log('\n   üîç Verificando conte√∫do:', 'cyan');
                
                for (const expected of expectedInResponse) {
                    const found = data.response.toLowerCase().includes(expected.toLowerCase());
                    results.checks[expected] = found;
                    
                    if (found) {
                        log(`      ‚úÖ "${expected}"`, 'green');
                    } else {
                        log(`      ‚ùå "${expected}" N√ÉO ENCONTRADO`, 'red');
                        allFound = false;
                    }
                }
                
                results.allExpectedFound = allFound;
            }
            
            // Verificar RAG
            if (checkRAG && data.metadata) {
                log('\n   üìä M√©tricas RAG:', 'cyan');
                log(`      - Busca RAG: ${data.metadata.ragSearched ? 'Sim' : 'N√£o'}`, 'cyan');
                log(`      - Resultados: ${data.metadata.ragResults || 0}`, 'cyan');
                log(`      - Tempo busca: ${data.metadata.ragSearchTime || 0}ms`, 'cyan');
                
                results.ragMetrics = {
                    searched: data.metadata.ragSearched,
                    results: data.metadata.ragResults,
                    time: data.metadata.ragSearchTime
                };
            }
            
            // Verificar mem√≥ria
            if (checkMemory && data.metadata) {
                log('\n   üß† M√©tricas Mem√≥ria:', 'cyan');
                log(`      - Itens mem√≥ria: ${data.metadata.memoryItems || 0}`, 'cyan');
                log(`      - Info usu√°rio: ${data.metadata.hasUserInfo ? 'Sim' : 'N√£o'}`, 'cyan');
                
                results.memoryMetrics = {
                    items: data.metadata.memoryItems,
                    hasUserInfo: data.metadata.hasUserInfo
                };
            }
            
            return results;
        }
        
        throw new Error('Resposta vazia do agente');
        
    } catch (error) {
        log(`   ‚ùå ERRO: ${error.message}`, 'red');
        return {
            success: false,
            error: error.message
        };
    }
}

// Fun√ß√£o para esperar
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Suite principal de testes
async function runCompleteTestSuite() {
    log('\nüöÄ INICIANDO BATERIA COMPLETA DE TESTES - PROJETO 58', 'magenta');
    log(`   SessionID: ${TEST_SESSION}`, 'cyan');
    log(`   UserID: ${TEST_USER}`, 'cyan');
    log(`   ProjectID: ${PROJECT_ID} (${PROJECT_NAME})`, 'cyan');
    
    const testResults = {
        total: 0,
        passed: 0,
        failed: 0,
        categories: {
            memory: { passed: 0, failed: 0 },
            context: { passed: 0, failed: 0 },
            rag: { passed: 0, failed: 0 },
            data: { passed: 0, failed: 0 }
        }
    };
    
    // ====== CATEGORIA 1: MEM√ìRIA PERFEITA ======
    logSection('CATEGORIA 1: TESTES DE MEM√ìRIA');
    
    // 1.1 Apresenta√ß√£o e contexto inicial
    await testAgent(
        "Ol√°! Meu nome √© Carlos Eduardo, sou gerente de produto na Hardware Solutions. Estamos monitorando nossa campanha de lan√ßamento do novo notebook gamer.",
        { testName: 'Apresenta√ß√£o Inicial' }
    );
    
    await wait(2000);
    
    // 1.2 Verificar se lembra do nome
    const test1 = await testAgent(
        "Qual √© meu nome completo?",
        {
            testName: 'Mem√≥ria: Nome',
            expectedInResponse: ['Carlos', 'Eduardo'],
            checkMemory: true
        }
    );
    
    testResults.total++;
    if (test1.allExpectedFound) {
        testResults.passed++;
        testResults.categories.memory.passed++;
        log('   ‚úÖ PASSOU: Lembrou do nome completo', 'green');
    } else {
        testResults.failed++;
        testResults.categories.memory.failed++;
        log('   ‚ùå FALHOU: N√£o lembrou do nome', 'red');
    }
    
    // 1.3 Verificar empresa
    const test2 = await testAgent(
        "Onde eu trabalho e qual meu cargo?",
        {
            testName: 'Mem√≥ria: Empresa/Cargo',
            expectedInResponse: ['Hardware Solutions', 'gerente', 'produto'],
            checkMemory: true
        }
    );
    
    testResults.total++;
    if (test2.checks && Object.values(test2.checks).filter(v => v).length >= 2) {
        testResults.passed++;
        testResults.categories.memory.passed++;
        log('   ‚úÖ PASSOU: Lembrou da empresa e cargo', 'green');
    } else {
        testResults.failed++;
        testResults.categories.memory.failed++;
        log('   ‚ùå FALHOU: N√£o lembrou empresa/cargo', 'red');
    }
    
    // 1.4 Adicionar informa√ß√µes m√∫ltiplas
    await testAgent(
        "Nosso produto principal √© o notebook Storm X450, lan√ßado em novembro de 2024.",
        { testName: 'Info: Produto' }
    );
    
    await testAgent(
        "A meta √© alcan√ßar 10.000 men√ß√µes at√© o final de janeiro.",
        { testName: 'Info: Meta' }
    );
    
    await testAgent(
        "O influenciador principal da campanha √© o TechGuru com 2 milh√µes de inscritos.",
        { testName: 'Info: Influenciador' }
    );
    
    await wait(2000);
    
    // 1.5 Verificar mem√≥ria completa
    const test3 = await testAgent(
        "Fa√ßa um resumo completo do que conversamos sobre minha campanha at√© agora",
        {
            testName: 'Mem√≥ria: Resumo Completo',
            expectedInResponse: ['Carlos', 'Hardware Solutions', 'Storm X450', '10.000', 'TechGuru', 'notebook'],
            checkMemory: true
        }
    );
    
    testResults.total++;
    if (test3.checks && Object.values(test3.checks).filter(v => v).length >= 4) {
        testResults.passed++;
        testResults.categories.memory.passed++;
        log('   ‚úÖ PASSOU: Manteve contexto completo', 'green');
    } else {
        testResults.failed++;
        testResults.categories.memory.failed++;
        log('   ‚ùå FALHOU: Perdeu informa√ß√µes do contexto', 'red');
    }
    
    // ====== CATEGORIA 2: CONTEXTO DE TELA ======
    logSection('CATEGORIA 2: TESTES DE CONTEXTO DE TELA');
    
    // 2.1 Dashboard Overview
    const test4 = await testAgent(
        "O que estou vendo na tela agora?",
        {
            testName: 'Contexto: Dashboard',
            context: {
                currentPage: '/dashboard',
                visibleData: {
                    totalMentions: 8542,
                    sentimentScore: 92,
                    reach: 4500000,
                    topVideos: ['Review Storm X450', 'Unboxing Gamer', 'Benchmark Tests']
                }
            },
            expectedInResponse: ['8542', '92', 'dashboard']
        }
    );
    
    testResults.total++;
    if (test4.allExpectedFound) {
        testResults.passed++;
        testResults.categories.context.passed++;
        log('   ‚úÖ PASSOU: Identificou dados do dashboard', 'green');
    } else {
        testResults.failed++;
        testResults.categories.context.failed++;
        log('   ‚ùå FALHOU: N√£o identificou contexto do dashboard', 'red');
    }
    
    // 2.2 P√°gina de Men√ß√µes
    const test5 = await testAgent(
        "Quais s√£o os sentimentos das men√ß√µes que aparecem na minha tela?",
        {
            testName: 'Contexto: Men√ß√µes',
            context: {
                currentPage: '/mentions',
                visibleData: {
                    mentions: [
                        { text: "Notebook incr√≠vel!", sentiment: "positive" },
                        { text: "Pre√ßo alto demais", sentiment: "negative" },
                        { text: "Performance excelente", sentiment: "positive" }
                    ],
                    positiveCount: 7800,
                    negativeCount: 742
                }
            },
            expectedInResponse: ['7800', 'positiv', '742']
        }
    );
    
    testResults.total++;
    if (test5.checks && Object.values(test5.checks).filter(v => v).length >= 2) {
        testResults.passed++;
        testResults.categories.context.passed++;
        log('   ‚úÖ PASSOU: Analisou sentimentos corretamente', 'green');
    } else {
        testResults.failed++;
        testResults.categories.context.failed++;
        log('   ‚ùå FALHOU: N√£o identificou dados de sentimento', 'red');
    }
    
    // ====== CATEGORIA 3: BUSCA RAG ======
    logSection('CATEGORIA 3: TESTES DE BUSCA RAG');
    
    // 3.1 Buscar men√ß√µes espec√≠ficas
    const test6 = await testAgent(
        "Me mostre algumas men√ß√µes recentes sobre o Storm X450",
        {
            testName: 'RAG: Busca Men√ß√µes',
            checkRAG: true,
            expectedInResponse: ['Storm', 'X450']
        }
    );
    
    testResults.total++;
    if (test6.ragMetrics && test6.ragMetrics.results > 0) {
        testResults.passed++;
        testResults.categories.rag.passed++;
        log('   ‚úÖ PASSOU: RAG encontrou men√ß√µes', 'green');
    } else {
        testResults.failed++;
        testResults.categories.rag.failed++;
        log('   ‚ùå FALHOU: RAG n√£o encontrou resultados', 'red');
    }
    
    // 3.2 Buscar v√≠deos
    const test7 = await testAgent(
        "Quais s√£o os v√≠deos mais populares sobre nosso produto?",
        {
            testName: 'RAG: Busca V√≠deos',
            checkRAG: true
        }
    );
    
    testResults.total++;
    if (test7.ragMetrics && test7.ragMetrics.searched) {
        testResults.passed++;
        testResults.categories.rag.passed++;
        log('   ‚úÖ PASSOU: RAG buscou v√≠deos', 'green');
    } else {
        testResults.failed++;
        testResults.categories.rag.failed++;
        log('   ‚ùå FALHOU: RAG n√£o foi ativado', 'red');
    }
    
    // 3.3 Buscar mensagens agendadas
    const test8 = await testAgent(
        "Quantas mensagens agendadas temos para responder?",
        {
            testName: 'RAG: Mensagens Agendadas',
            checkRAG: true,
            expectedInResponse: ['agendad']
        }
    );
    
    testResults.total++;
    if (test8.success && test8.response) {
        testResults.passed++;
        testResults.categories.rag.passed++;
        log('   ‚úÖ PASSOU: Identificou mensagens agendadas', 'green');
    } else {
        testResults.failed++;
        testResults.categories.rag.failed++;
        log('   ‚ùå FALHOU: N√£o processou mensagens agendadas', 'red');
    }
    
    // ====== CATEGORIA 4: DADOS REAIS DO PROJETO ======
    logSection('CATEGORIA 4: TESTES DE DADOS DO PROJETO 58');
    
    // 4.1 Estat√≠sticas gerais
    const test9 = await testAgent(
        "Qual o total de men√ß√µes do projeto HW?",
        {
            testName: 'Dados: Total Men√ß√µes',
            checkRAG: true
        }
    );
    
    testResults.total++;
    if (test9.success && test9.response.match(/\d+/)) {
        testResults.passed++;
        testResults.categories.data.passed++;
        log('   ‚úÖ PASSOU: Retornou total de men√ß√µes', 'green');
    } else {
        testResults.failed++;
        testResults.categories.data.failed++;
        log('   ‚ùå FALHOU: N√£o retornou estat√≠sticas', 'red');
    }
    
    // 4.2 Canais e v√≠deos
    const test10 = await testAgent(
        "Quantos canais e v√≠deos estamos monitorando?",
        {
            testName: 'Dados: Canais/V√≠deos',
            expectedInResponse: ['canal', 'v√≠deo']
        }
    );
    
    testResults.total++;
    if (test10.allExpectedFound) {
        testResults.passed++;
        testResults.categories.data.passed++;
        log('   ‚úÖ PASSOU: Informou sobre canais/v√≠deos', 'green');
    } else {
        testResults.failed++;
        testResults.categories.data.failed++;
        log('   ‚ùå FALHOU: N√£o informou canais/v√≠deos', 'red');
    }
    
    // 4.3 An√°lise temporal
    const test11 = await testAgent(
        "Como est√° o desempenho da campanha hoje comparado com ontem?",
        {
            testName: 'Dados: An√°lise Temporal',
            checkRAG: true
        }
    );
    
    testResults.total++;
    if (test11.success && (test11.response.includes('hoje') || test11.response.includes('ontem'))) {
        testResults.passed++;
        testResults.categories.data.passed++;
        log('   ‚úÖ PASSOU: Fez an√°lise temporal', 'green');
    } else {
        testResults.failed++;
        testResults.categories.data.failed++;
        log('   ‚ùå FALHOU: N√£o fez an√°lise temporal', 'red');
    }
    
    // ====== TESTE FINAL: MEM√ìRIA DE LONGO PRAZO ======
    logSection('TESTE FINAL: PERSIST√äNCIA DE MEM√ìRIA');
    
    // Fazer v√°rias perguntas n√£o relacionadas
    await testAgent("Quais s√£o as principais funcionalidades do Liftlio?", { testName: 'Pergunta gen√©rica 1' });
    await testAgent("Como funciona o sistema de alertas?", { testName: 'Pergunta gen√©rica 2' });
    await testAgent("Posso exportar relat√≥rios?", { testName: 'Pergunta gen√©rica 3' });
    
    await wait(2000);
    
    // Verificar se ainda lembra de tudo
    const testFinal = await testAgent(
        "Voc√™ ainda lembra meu nome completo, empresa, produto principal e nome do influenciador?",
        {
            testName: 'Mem√≥ria Final: Longo Prazo',
            expectedInResponse: ['Carlos Eduardo', 'Hardware Solutions', 'Storm X450', 'TechGuru'],
            checkMemory: true
        }
    );
    
    testResults.total++;
    if (testFinal.allExpectedFound) {
        testResults.passed++;
        testResults.categories.memory.passed++;
        log('   ‚úÖ PASSOU: Mem√≥ria perfeita ap√≥s m√∫ltiplas intera√ß√µes!', 'green');
    } else {
        testResults.failed++;
        testResults.categories.memory.failed++;
        log('   ‚ùå FALHOU: Perdeu mem√≥ria ap√≥s intera√ß√µes', 'red');
    }
    
    // ====== RELAT√ìRIO FINAL ======
    logSection('üìä RELAT√ìRIO FINAL DE TESTES');
    
    const percentage = Math.round((testResults.passed / testResults.total) * 100);
    
    log(`\nüìà RESUMO GERAL:`, 'yellow');
    log(`   Total de testes: ${testResults.total}`, 'white');
    log(`   ‚úÖ Passaram: ${testResults.passed} (${percentage}%)`, 
        percentage >= 90 ? 'green' : percentage >= 70 ? 'yellow' : 'red');
    log(`   ‚ùå Falharam: ${testResults.failed}`, testResults.failed > 0 ? 'red' : 'green');
    
    log(`\nüìä POR CATEGORIA:`, 'yellow');
    
    // Mem√≥ria
    const memTotal = testResults.categories.memory.passed + testResults.categories.memory.failed;
    const memPercent = memTotal > 0 ? Math.round((testResults.categories.memory.passed / memTotal) * 100) : 0;
    log(`   üß† Mem√≥ria: ${testResults.categories.memory.passed}/${memTotal} (${memPercent}%)`,
        memPercent === 100 ? 'green' : memPercent >= 80 ? 'yellow' : 'red');
    
    // Contexto
    const ctxTotal = testResults.categories.context.passed + testResults.categories.context.failed;
    const ctxPercent = ctxTotal > 0 ? Math.round((testResults.categories.context.passed / ctxTotal) * 100) : 0;
    log(`   üñ•Ô∏è  Contexto: ${testResults.categories.context.passed}/${ctxTotal} (${ctxPercent}%)`,
        ctxPercent === 100 ? 'green' : ctxPercent >= 80 ? 'yellow' : 'red');
    
    // RAG
    const ragTotal = testResults.categories.rag.passed + testResults.categories.rag.failed;
    const ragPercent = ragTotal > 0 ? Math.round((testResults.categories.rag.passed / ragTotal) * 100) : 0;
    log(`   üîç RAG: ${testResults.categories.rag.passed}/${ragTotal} (${ragPercent}%)`,
        ragPercent === 100 ? 'green' : ragPercent >= 80 ? 'yellow' : 'red');
    
    // Dados
    const dataTotal = testResults.categories.data.passed + testResults.categories.data.failed;
    const dataPercent = dataTotal > 0 ? Math.round((testResults.categories.data.passed / dataTotal) * 100) : 0;
    log(`   üìä Dados: ${testResults.categories.data.passed}/${dataTotal} (${dataPercent}%)`,
        dataPercent === 100 ? 'green' : dataPercent >= 80 ? 'yellow' : 'red');
    
    // Diagn√≥stico final
    console.log('\n' + '‚ïê'.repeat(60));
    if (percentage === 100) {
        log('üéâ PERFEITO! Sistema funcionando com 100% de efic√°cia!', 'green');
        log('   O agente est√° com mem√≥ria perfeita e busca RAG otimizada.', 'green');
    } else if (percentage >= 90) {
        log('‚úÖ EXCELENTE! Sistema funcionando muito bem!', 'green');
        log('   Apenas pequenos ajustes necess√°rios.', 'green');
    } else if (percentage >= 70) {
        log('‚ö†Ô∏è  BOM, mas precisa melhorias', 'yellow');
        log('   Revisar componentes que falharam.', 'yellow');
    } else {
        log('‚ùå CR√çTICO! Sistema com problemas graves!', 'red');
        log('   Necess√°ria interven√ß√£o urgente.', 'red');
    }
    console.log('‚ïê'.repeat(60));
    
    // Problemas identificados
    if (testResults.failed > 0) {
        log('\nüîß A√á√ïES RECOMENDADAS:', 'yellow');
        
        if (testResults.categories.memory.failed > 0) {
            log('   ‚Ä¢ Revisar sistema de mem√≥ria e persist√™ncia', 'white');
            log('     - Verificar tabela agent_conversations', 'white');
            log('     - Validar extra√ß√£o de informa√ß√µes', 'white');
        }
        
        if (testResults.categories.context.failed > 0) {
            log('   ‚Ä¢ Melhorar processamento de contexto de tela', 'white');
            log('     - Verificar passagem de dados do frontend', 'white');
        }
        
        if (testResults.categories.rag.failed > 0) {
            log('   ‚Ä¢ Otimizar sistema RAG', 'white');
            log('     - Verificar embeddings e √≠ndices', 'white');
            log('     - Validar fun√ß√£o search_rag_enhanced', 'white');
        }
        
        if (testResults.categories.data.failed > 0) {
            log('   ‚Ä¢ Verificar acesso a dados do projeto', 'white');
            log('     - Confirmar project_id correto', 'white');
            log('     - Validar queries de estat√≠sticas', 'white');
        }
    }
    
    return testResults;
}

// Executar bateria completa
console.log('\nüöÄ BATERIA DE TESTES v26 - PROJETO 58 (HW)');
console.log('   Testando: Mem√≥ria, Contexto, RAG e Dados Reais\n');

runCompleteTestSuite().then(results => {
    const exitCode = results.passed === results.total ? 0 : 1;
    log(`\n‚úÖ Testes finalizados! Exit code: ${exitCode}\n`, exitCode === 0 ? 'green' : 'red');
    process.exit(exitCode);
}).catch(error => {
    log(`\n‚ùå Erro fatal nos testes: ${error.message}\n`, 'red');
    console.error(error);
    process.exit(1);
});