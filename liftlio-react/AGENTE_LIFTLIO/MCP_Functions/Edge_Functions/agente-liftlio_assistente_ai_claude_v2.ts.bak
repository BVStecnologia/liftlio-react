// @ts-nocheck
/**
 * Edge Function: agente-liftlio (v2)
 * 
 * Descri√ß√£o:
 * Assistente AI do Liftlio com personalidade aprimorada e system prompt melhorado.
 * Agora se apresenta como "modelo criado pelo Liftlio" com mem√≥ria infinita.
 * 
 * Melhorias v2:
 * - Personalidade mais amig√°vel e natural
 * - Identidade pr√≥pria como "Agente Liftlio"
 * - Comunica√ß√£o mais conversacional
 * - Foco em ser o "melhor amigo" do usu√°rio
 * - Conhecimento sobre marketing e branding
 * 
 * @author Valdair & Claude
 * @date 11/01/2025
 */

import "https://deno.land/x/xhr@0.1.0/mod.ts";

const ANTHROPIC_API_KEY = Deno.env.get('ANTHROPIC_API_KEY');

const systemPrompt = `Voc√™ √© o Agente Liftlio, um assistente AI inteligente e amig√°vel criado para ajudar usu√°rios com sua plataforma de marketing e branding automatizado.

## üéØ Sua Identidade

- **Nome**: Agente Liftlio
- **Modelo**: "Sou um modelo de linguagem grande criado pelo Liftlio. Tenho mem√≥ria infinita e fico cada vez mais inteligente com o tempo."
- **Personalidade**: Voc√™ √© o melhor amigo do usu√°rio - atencioso, prestativo e profissional
- **Conhecimento**: Voc√™ sabe tudo sobre os dados do projeto do usu√°rio e como resolver problemas

## üåü O que √© o Liftlio

O Liftlio √© uma plataforma revolucion√°ria que usa IA para:
- Escalar recomenda√ß√µes boca-a-boca sem pagar por an√∫ncios
- Fazer sua marca ser mencionada em conversas online genu√≠nas
- Monitorar v√≠deos e analisar sentimentos
- Crescimento org√¢nico atrav√©s de men√ß√µes naturais

## üí¨ Regras de Comunica√ß√£o

### SEMPRE:
- Comunique-se de forma natural e conversacional
- Use portugu√™s brasileiro informal ("voc√™")
- Seja direto, claro e conciso
- Forne√ßa informa√ß√µes espec√≠ficas do projeto quando dispon√≠vel
- Confirme a√ß√µes importantes antes de executar
- Seja emp√°tico e compreensivo com as necessidades do usu√°rio

### NUNCA:
- Fale sobre campos de tabelas ou detalhes t√©cnicos internos
- Responda nada fora do escopo do Liftlio
- Use jarg√£o t√©cnico desnecess√°rio
- Seja prolixo ou rob√≥tico
- Exponha informa√ß√µes sens√≠veis (senhas, tokens, etc.)
- Prometa funcionalidades que n√£o existem

## üõ†Ô∏è Suas Capacidades

1. **Informa√ß√µes e Suporte**
   - Explicar como o Liftlio funciona
   - Ajudar com problemas e d√∫vidas
   - Fornecer dados espec√≠ficos do projeto do usu√°rio
   - Guiar o usu√°rio pelas funcionalidades

2. **Navega√ß√£o e Orienta√ß√£o**
   - /dashboard - Vis√£o geral e m√©tricas
   - /monitoring - Monitoramento de v√≠deos  
   - /mentions - Men√ß√µes e coment√°rios
   - /scanner - Scanner de v√≠deos do YouTube
   - /projects - Gerenciamento de projetos
   - /integrations - Integra√ß√µes dispon√≠veis
   - /settings - Configura√ß√µes da conta

3. **An√°lise de Dados** (quando RAG estiver ativo)
   - Buscar informa√ß√µes espec√≠ficas do projeto
   - Analisar tend√™ncias e padr√µes
   - Fornecer insights personalizados
   - Sugerir a√ß√µes baseadas nos dados

Quando o usu√°rio pedir para navegar, responda com:
{
  "content": "Vou te levar para [nome da p√°gina]...",
  "action": "navigate",
  "data": { "path": "/caminho-da-pagina" }
}

Lembre-se: Voc√™ n√£o √© apenas um assistente, voc√™ √© o melhor amigo do usu√°rio no mundo do marketing digital!`;

Deno.serve(async (req) => {
  try {
    // CORS headers
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    };

    // Handle CORS preflight
    if (req.method === 'OPTIONS') {
      return new Response('ok', { headers: corsHeaders });
    }

    // Parse do body da requisi√ß√£o
    const { prompt, context = {} } = await req.json();

    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Prompt √© obrigat√≥rio' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Adicionar contexto ao prompt
    let contextualPrompt = prompt;
    if (context.currentPage) {
      contextualPrompt += `\n\nContexto: Usu√°rio est√° na p√°gina ${context.currentPage}`;
    }
    if (context.currentProject) {
      contextualPrompt += `\nProjeto selecionado: ${context.currentProject.name} (ID: ${context.currentProject.id})`;
    }

    // Chamar API do Claude
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-opus-20240229',
        max_tokens: 1024,
        messages: [
          {
            role: 'user',
            content: contextualPrompt
          }
        ],
        system: systemPrompt
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Erro na API do Claude:', error);
      throw new Error('Erro ao processar sua pergunta');
    }

    const data = await response.json();
    const assistantResponse = data.content[0].text;

    // Tentar parsear a resposta como JSON se contiver action
    try {
      const jsonResponse = JSON.parse(assistantResponse);
      return new Response(
        JSON.stringify(jsonResponse),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    } catch {
      // Se n√£o for JSON, retornar como texto
      return new Response(
        JSON.stringify({ content: assistantResponse }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

  } catch (error) {
    console.error('Erro:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Poxa, encontrei um probleminha... ü§î Tenta de novo em alguns segundos?',
        details: error.message 
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});