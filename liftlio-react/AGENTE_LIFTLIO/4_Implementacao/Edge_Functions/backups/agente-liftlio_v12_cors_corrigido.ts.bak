// @ts-nocheck
/**
 * Edge Function: agente-liftlio (v12 - CORS Corrigido)
 * 
 * Descrição:
 * Versão com correção de CORS para permitir requisições do frontend.
 * 
 * Melhorias v12 (CORS):
 * - Headers CORS configurados corretamente
 * - Suporte para requisições OPTIONS (preflight)
 * - Headers de resposta padronizados
 * - Mantém todas as funcionalidades da v12 original
 * 
 * @author Valdair & Claude
 * @date 13/01/2025
 */

import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.7';

// Configuração de CORS
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

// Variáveis de ambiente
const ANTHROPIC_API_KEY = Deno.env.get('CLAUDE_API_KEY');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

// Cliente Supabase com service role para acessar todos os dados
const supabase = createClient(
  SUPABASE_URL!,
  SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

/**
 * Detecta o idioma do texto
 */
function detectLanguage(text: string): 'pt' | 'en' {
  // Palavras comuns em português
  const ptWords = /\b(você|voce|está|esta|são|sao|tem|tudo|bem|ola|olá|obrigado|por favor|ajuda|preciso|quero|fazer|isso|aqui|agora|hoje|ontem|amanhã|sim|não|nao|mais|menos|muito|pouco|grande|pequeno|bom|ruim|melhor|pior|quantas|quantos|quais|mensagens|postadas|vídeos|canais)\b/i;
  
  // Palavras comuns em inglês
  const enWords = /\b(you|are|is|have|hello|hi|thanks|please|help|need|want|make|this|here|now|today|yesterday|tomorrow|yes|no|more|less|very|little|big|small|good|bad|better|worse|how|many|which|messages|posted|videos|channels)\b/i;
  
  // Conta matches
  const ptMatches = (text.match(ptWords) || []).length;
  const enMatches = (text.match(enWords) || []).length;
  
  // Se tiver mais palavras em português ou se não detectar nenhuma, assume PT (default)
  return ptMatches >= enMatches ? 'pt' : 'en';
}

/**
 * Salva conversa para memória persistente
 */
async function saveConversation(userId: string, projectId: string | null, sessionId: string, message: string, type: 'user' | 'assistant') {
  try {
    const { error } = await supabase
      .from('agent_conversations')
      .insert({
        user_id: userId,
        project_id: projectId ? parseInt(projectId) : null,
        session_id: sessionId,
        message_type: type,
        message: message,
        metadata: {
          timestamp: new Date().toISOString(),
          message_length: message.length
        }
      });

    if (error) {
      console.error('Erro ao salvar conversa:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Erro ao salvar conversa:', error);
    return false;
  }
}

/**
 * Busca contexto histórico de conversas
 */
async function getConversationContext(userId: string, projectId: string | null, sessionId: string) {
  try {
    // Buscar últimas 10 mensagens da sessão atual
    const { data: sessionMessages } = await supabase
      .from('agent_conversations')
      .select('message, message_type, created_at')
      .eq('user_id', userId)
      .eq('session_id', sessionId)
      .order('created_at', { ascending: false })
      .limit(10);

    // Buscar últimas 5 mensagens de outras sessões do mesmo projeto
    let projectMessages = [];
    if (projectId) {
      const { data } = await supabase
        .from('agent_conversations')
        .select('message, message_type, created_at, session_id')
        .eq('user_id', userId)
        .eq('project_id', parseInt(projectId))
        .neq('session_id', sessionId)
        .order('created_at', { ascending: false })
        .limit(5);
      
      projectMessages = data || [];
    }

    return {
      sessionHistory: sessionMessages || [],
      projectHistory: projectMessages
    };
  } catch (error) {
    console.error('Erro ao buscar contexto:', error);
    return {
      sessionHistory: [],
      projectHistory: []
    };
  }
}

/**
 * Categoriza o tipo de pergunta para otimizar a busca RAG
 */
function categorizeQuestion(prompt: string): string[] {
  const categories = [];
  
  // Detectar perguntas sobre métricas/números
  if (/\b(quantos?|quantas?|total|número|estatísticas?|métricas?|how many|total|number|statistics|metrics)\b/i.test(prompt)) {
    categories.push('metrics');
  }
  
  // Detectar perguntas sobre conteúdo específico
  if (/\b(mensagens?|comentários?|vídeos?|canais?|posts?|postadas?|messages?|comments?|videos?|channels?|posted)\b/i.test(prompt)) {
    categories.push('content');
  }
  
  // Detectar perguntas sobre análise/sentiment
  if (/\b(sentimento|análise|positivo|negativo|tendência|sentiment|analysis|positive|negative|trend)\b/i.test(prompt)) {
    categories.push('analysis');
  }
  
  // Detectar perguntas temporais
  if (/\b(hoje|ontem|semana|mês|quando|today|yesterday|week|month|when)\b/i.test(prompt)) {
    categories.push('temporal');
  }
  
  // Default
  if (categories.length === 0) {
    categories.push('general');
  }
  
  return categories;
}

/**
 * Busca estatísticas reais do projeto
 */
async function getProjectStats(projectId: string) {
  try {
    // Usar a função RPC que conta mensagens postadas
    const { data: dashboardStats, error: dashboardError } = await supabase.rpc('get_project_dashboard_stats', {
      project_id_param: parseInt(projectId)
    });

    if (dashboardError) {
      console.error('Erro ao buscar dashboard stats:', dashboardError);
      return null;
    }

    // Buscar total de vídeos
    const { count: totalVideos } = await supabase
      .from('Videos')
      .select('*', { count: 'exact', head: true })
      .eq('ProjetoID', projectId);

    // Buscar canais ativos (que têm pelo menos uma menção)
    const { data: activeChannelsData } = await supabase
      .from('Comentarios_Principais')
      .select('channelId')
      .eq('ProjetoID', projectId)
      .not('channelId', 'is', null);

    const uniqueChannels = new Set(activeChannelsData?.map(c => c.channelId) || []);
    const activeChannels = uniqueChannels.size;

    // Buscar top canais com mais menções
    const { data: topChannelsData } = await supabase.rpc('get_top_channels_by_project', {
      project_id_input: parseInt(projectId),
      limit_input: 3
    });

    return {
      totalMentions: dashboardStats?.total_mentions || 0,
      mentionsToday: dashboardStats?.mentions_posted_today || 0,
      activeChannels: activeChannels,
      totalVideos: totalVideos || 0,
      topChannels: topChannelsData || []
    };

  } catch (error) {
    console.error('Erro ao buscar estatísticas:', error);
    return null;
  }
}

/**
 * Busca mensagens agendadas recentes
 */
async function getRecentScheduledMessages(projectId: string, limit: number = 2) {
  try {
    const { data, error } = await supabase
      .from('Mensagens')
      .select(`
        id,
        Conteudo,
        DataPostagem,
        VideoID,
        ComentarioPrincipalID
      `)
      .eq('ProjetoID', projectId)
      .eq('Postado', true)
      .not('DataPostagem', 'is', null)
      .order('DataPostagem', { ascending: false })
      .limit(limit);

    if (error) {
      console.error('Erro ao buscar mensagens agendadas:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Erro ao buscar mensagens agendadas:', error);
    return [];
  }
}

/**
 * Formata data para exibição amigável
 */
function formatDate(dateString: string, language: 'pt' | 'en'): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  if (language === 'pt') {
    if (diffDays === 0) return 'hoje';
    if (diffDays === 1) return 'ontem';
    if (diffDays < 7) return `há ${diffDays} dias`;
    return date.toLocaleDateString('pt-BR');
  } else {
    if (diffDays === 0) return 'today';
    if (diffDays === 1) return 'yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString('en-US');
  }
}

/**
 * Busca dados relevantes no projeto usando RAG
 */
async function searchProjectData(prompt: string, projectId: string, threshold: number = 0.7) {
  try {
    // Gerar embedding para a pergunta
    const { data: embeddingData, error: embeddingError } = await supabase.functions.invoke('generate-embedding', {
      body: { content: prompt }
    });

    if (embeddingError || !embeddingData?.embedding) {
      console.error('Erro ao gerar embedding:', embeddingError);
      return null;
    }

    const projectIdNumber = parseInt(projectId);
    
    // Buscar dados relevantes
    const { data: searchResults, error: searchError } = await supabase.rpc('search_project_rag', {
      query_embedding: embeddingData.embedding,
      project_filter: projectIdNumber,
      similarity_threshold: threshold,
      match_count: 20 // Buscar mais resultados para melhor filtragem
    });

    if (searchError) {
      console.error('Erro na busca RAG:', searchError);
      return null;
    }

    if (!searchResults || searchResults.length === 0) {
      return null;
    }

    // Agrupar e ranquear resultados por relevância e tipo
    const groupedResults = searchResults.reduce((acc: any, result: any) => {
      const table = result.source_table;
      if (!acc[table]) {
        acc[table] = [];
      }
      acc[table].push(result);
      return acc;
    }, {});

    // Formatar resultados mais relevantes
    const formattedResults = [];
    const maxPerTable = 3;

    for (const [table, results] of Object.entries(groupedResults)) {
      const sortedResults = (results as any[])
        .sort((a, b) => b.similarity - a.similarity)
        .slice(0, maxPerTable);

      for (const result of sortedResults) {
        formattedResults.push({
          table,
          content: result.content,
          similarity: result.similarity,
          metadata: result.metadata
        });
      }
    }

    return formattedResults.slice(0, 10); // Máximo 10 resultados

  } catch (error) {
    console.error('Erro na busca RAG:', error);
    return null;
  }
}

/**
 * Formata contexto RAG para o prompt
 */
function formatRAGContext(ragResults: any[], language: 'pt' | 'en'): string {
  if (!ragResults || ragResults.length === 0) return '';

  const tableTranslations: any = {
    'Mensagens': language === 'pt' ? 'Mensagens' : 'Messages',
    'Comentarios_Principais': language === 'pt' ? 'Comentários' : 'Comments',
    'Videos': language === 'pt' ? 'Vídeos' : 'Videos',
    'Respostas_Comentarios': language === 'pt' ? 'Respostas' : 'Replies',
    'Settings_messages_posts': language === 'pt' ? 'Configurações' : 'Settings'
  };

  let context = language === 'pt' 
    ? '\n\n## 🔍 Dados Relevantes Encontrados:\n' 
    : '\n\n## 🔍 Relevant Data Found:\n';

  const groupedByTable = ragResults.reduce((acc: any, result: any) => {
    const tableName = tableTranslations[result.table] || result.table;
    if (!acc[tableName]) {
      acc[tableName] = [];
    }
    acc[tableName].push(result);
    return acc;
  }, {});

  for (const [tableName, results] of Object.entries(groupedByTable)) {
    context += `\n### ${tableName}:\n`;
    for (const result of results as any[]) {
      // Limitar conteúdo para não ficar muito longo
      const content = result.content.length > 200 
        ? result.content.substring(0, 200) + '...' 
        : result.content;
      
      context += `- ${content}\n`;
      
      // Adicionar metadata relevante se disponível
      if (result.metadata?.content_preview) {
        context += `  ↳ ${result.metadata.content_preview}\n`;
      }
    }
  }

  return context;
}

/**
 * Gera resposta usando Claude
 */
async function generateResponse(systemPrompt: string, userPrompt: string, language: 'pt' | 'en', sessionId: string, userId: string) {
  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': ANTHROPIC_API_KEY!,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-opus-20240229',
        max_tokens: 512, // REDUZIDO de 1024 para 512
        temperature: 0.7,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: userPrompt
          }
        ]
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(`Claude API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    const aiResponse = data.content[0]?.text || '';

    return aiResponse;

  } catch (error) {
    console.error('Erro ao gerar resposta:', error);
    throw error;
  }
}

// Handler principal do Deno
Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      status: 200,
      headers: corsHeaders
    });
  }

  try {
    // Validar método
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: 'Method not allowed' }),
        { 
          status: 405, 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders
          } 
        }
      );
    }

    // Parse do body
    const { prompt, context, userId, sessionId } = await req.json();

    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Prompt is required' }),
        { 
          status: 400, 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders
          } 
        }
      );
    }

    // Detectar idioma
    const language = detectLanguage(prompt);

    // Gerar ID de sessão se não fornecido
    const currentSessionId = sessionId || crypto.randomUUID();

    // Construir prompt contextual
    let contextualPrompt = '';
    
    // Adicionar contexto da página atual
    if (context?.currentPage) {
      if (language === 'pt') {
        contextualPrompt += `\nUsuário está na página: ${context.currentPage}`;
      } else {
        contextualPrompt += `\nUser is on page: ${context.currentPage}`;
      }
    }
    
    // Adicionar projeto atual SEM O ID
    if (context?.currentProject) {
      if (language === 'pt') {
        contextualPrompt += `\nProjeto: ${context.currentProject.name}`;
      } else {
        contextualPrompt += `\nProject: ${context.currentProject.name}`;
      }
    }
    
    // Buscar e adicionar estatísticas reais se houver projeto
    let projectStats = null;
    let recentMessages = [];
    let ragResults = null;
    
    if (context?.currentProject?.id) {
      // Buscar estatísticas
      projectStats = await getProjectStats(context.currentProject.id);
      
      // Buscar mensagens recentes
      recentMessages = await getRecentScheduledMessages(context.currentProject.id);
      
      // Buscar dados relevantes via RAG
      const categories = categorizeQuestion(prompt);
      let threshold = 0.7;
      
      // Ajustar threshold baseado na categoria
      if (categories.includes('metrics')) {
        threshold = 0.6;
      } else if (categories.includes('content')) {
        threshold = 0.65;
      }
      
      ragResults = await searchProjectData(prompt, context.currentProject.id, threshold);
    }
    
    // Adicionar estatísticas reais
    if (projectStats) {
      if (language === 'pt') {
        contextualPrompt += `\n\n## 📈 Estatísticas REAIS do projeto:`;
        contextualPrompt += `\n- Total de menções: ${projectStats.totalMentions}`;
        contextualPrompt += `\n- Menções hoje: ${projectStats.mentionsToday}`;
        contextualPrompt += `\n- Canais ativos: ${projectStats.activeChannels}`;
        contextualPrompt += `\n- Vídeos totais: ${projectStats.totalVideos}`;
        
        if (projectStats.topChannels.length > 0) {
          contextualPrompt += `\n\n### 🏆 Top Canais:`;
          projectStats.topChannels.forEach((channel: any, index: number) => {
            contextualPrompt += `\n${index + 1}. ${channel.channel_title} (${channel.mention_count} menções)`;
          });
        }
      } else {
        contextualPrompt += `\n\n## 📈 REAL project statistics:`;
        contextualPrompt += `\n- Total mentions: ${projectStats.totalMentions}`;
        contextualPrompt += `\n- Mentions today: ${projectStats.mentionsToday}`;
        contextualPrompt += `\n- Active channels: ${projectStats.activeChannels}`;
        contextualPrompt += `\n- Total videos: ${projectStats.totalVideos}`;
        
        if (projectStats.topChannels.length > 0) {
          contextualPrompt += `\n\n### 🏆 Top Channels:`;
          projectStats.topChannels.forEach((channel: any, index: number) => {
            contextualPrompt += `\n${index + 1}. ${channel.channel_title} (${channel.mention_count} mentions)`;
          });
        }
      }
    }
    
    // Adicionar mensagens recentes
    if (recentMessages.length > 0) {
      if (language === 'pt') {
        contextualPrompt += `\n\n## 📅 Postagens Recentes:`;
        recentMessages.forEach((msg: any) => {
          const date = formatDate(msg.DataPostagem, language);
          contextualPrompt += `\n- ${date}: "${msg.Conteudo.substring(0, 100)}..."`;
          if (msg.VideoID) {
            contextualPrompt += ` (Vídeo ID: ${msg.VideoID})`;
          }
        });
      } else {
        contextualPrompt += `\n\n## 📅 Recent Posts:`;
        recentMessages.forEach((msg: any) => {
          const date = formatDate(msg.DataPostagem, language);
          contextualPrompt += `\n- ${date}: "${msg.Conteudo.substring(0, 100)}..."`;
          if (msg.VideoID) {
            contextualPrompt += ` (Video ID: ${msg.VideoID})`;
          }
        });
      }
    }
    
    // Adicionar contexto RAG se houver resultados
    if (ragResults && ragResults.length > 0) {
      contextualPrompt += formatRAGContext(ragResults, language);
    }

    // Buscar contexto histórico
    const conversationHistory = await getConversationContext(
      userId || 'anonymous',
      context?.currentProject?.id || null,
      currentSessionId
    );
    
    // Adicionar histórico ao contexto se houver
    if (conversationHistory.sessionHistory.length > 0 || conversationHistory.projectHistory.length > 0) {
      if (language === 'pt') {
        contextualPrompt += `\n\n## 💬 Histórico de Conversas:`;
        
        // Histórico da sessão atual
        if (conversationHistory.sessionHistory.length > 0) {
          contextualPrompt += `\n### Conversa Atual:`;
          conversationHistory.sessionHistory.reverse().forEach((msg: any) => {
            const role = msg.message_type === 'user' ? 'Usuário' : 'Assistente';
            contextualPrompt += `\n${role}: ${msg.message.substring(0, 150)}${msg.message.length > 150 ? '...' : ''}`;
          });
        }
        
        // Histórico de outras sessões
        if (conversationHistory.projectHistory.length > 0) {
          contextualPrompt += `\n### Conversas Anteriores:`;
          conversationHistory.projectHistory.forEach((msg: any) => {
            const role = msg.message_type === 'user' ? 'Usuário' : 'Assistente';
            contextualPrompt += `\n${role}: ${msg.message.substring(0, 100)}${msg.message.length > 100 ? '...' : ''}`;
          });
        }
      } else {
        contextualPrompt += `\n\n## 💬 Conversation History:`;
        
        // Current session history
        if (conversationHistory.sessionHistory.length > 0) {
          contextualPrompt += `\n### Current Conversation:`;
          conversationHistory.sessionHistory.reverse().forEach((msg: any) => {
            const role = msg.message_type === 'user' ? 'User' : 'Assistant';
            contextualPrompt += `\n${role}: ${msg.message.substring(0, 150)}${msg.message.length > 150 ? '...' : ''}`;
          });
        }
        
        // Previous sessions history
        if (conversationHistory.projectHistory.length > 0) {
          contextualPrompt += `\n### Previous Conversations:`;
          conversationHistory.projectHistory.forEach((msg: any) => {
            const role = msg.message_type === 'user' ? 'User' : 'Assistant';
            contextualPrompt += `\n${role}: ${msg.message.substring(0, 100)}${msg.message.length > 100 ? '...' : ''}`;
          });
        }
      }
    }
    
    // System prompt otimizado
    const systemPrompt = language === 'pt' 
      ? `Você é o assistente AI do Liftlio, uma plataforma de monitoramento de vídeos e análise de sentimentos. Seja direto, útil e amigável. Use os dados REAIS fornecidos no contexto para responder com precisão. Mantenha respostas concisas e focadas.${contextualPrompt}`
      : `You are the Liftlio AI assistant, a video monitoring and sentiment analysis platform. Be direct, helpful and friendly. Use the REAL data provided in the context to respond accurately. Keep responses concise and focused.${contextualPrompt}`;

    // Salvar pergunta do usuário
    await saveConversation(
      userId || 'anonymous',
      context?.currentProject?.id || null,
      currentSessionId,
      prompt,
      'user'
    );

    // Gerar resposta
    const aiResponse = await generateResponse(
      systemPrompt, 
      prompt, 
      language,
      currentSessionId,
      userId || 'anonymous'
    );
    
    // Salvar resposta do assistente
    await saveConversation(
      userId || 'anonymous',
      context?.currentProject?.id || null,
      currentSessionId,
      aiResponse,
      'assistant'
    );

    return new Response(
      JSON.stringify({ 
        content: aiResponse,  // Mudado de 'response' para 'content' para compatibilidade
        sessionId: currentSessionId,
        language,
        hasRAGData: ragResults && ragResults.length > 0
      }),
      { 
        status: 200, 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders
        } 
      }
    );

  } catch (error) {
    console.error('Erro no agente:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500, 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders
        } 
      }
    );
  }
});