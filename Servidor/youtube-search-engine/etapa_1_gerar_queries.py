#!/usr/bin/env python3
"""
Debug Etapa 1 - Com prompt otimizado
"""

import asyncio
import json
from typing import Dict, List
import httpx
from anthropic import Anthropic
from dotenv import load_dotenv
import os

load_dotenv()

class DebugSearchEngineOtimizado:
    def __init__(self):
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_KEY")
        self.claude_api_key = os.getenv("CLAUDE_API_KEY")
        self.claude = Anthropic(api_key=self.claude_api_key)
        
    async def step1_fetch_project_data(self, scanner_id: int) -> Dict:
        """Etapa 1: Buscar dados completos do projeto"""
        print(f"\n{'='*80}")
        print(f"ETAPA 1: BUSCAR DADOS DO PROJETO")
        print(f"{'='*80}\n")
        
        headers = {
            "apikey": self.supabase_key,
            "Authorization": f"Bearer {self.supabase_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                # Tentar fun√ß√£o completa primeiro
                response = await client.post(
                    f"{self.supabase_url}/rest/v1/rpc/get_projeto_data_completo",
                    headers=headers,
                    json={"scanner_id": scanner_id}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print("‚úÖ Fun√ß√£o get_projeto_data_completo encontrada!")
                else:
                    # Fallback para fun√ß√£o b√°sica
                    response = await client.post(
                        f"{self.supabase_url}/rest/v1/rpc/get_projeto_data",
                        headers=headers,
                        json={"scanner_id": scanner_id}
                    )
                    result = response.json()
                    if isinstance(result, list) and len(result) > 0:
                        raw_data = result[0]
                    else:
                        raw_data = result
                    
                    # MAPEAMENTO CORRETO DOS CAMPOS
                    data = {
                        'scanner_id': scanner_id,
                        'palavra_chave': raw_data.get('palavra_chave', ''),
                        'projeto_id': raw_data.get('projeto_id'),
                        'descricao_projeto': raw_data.get('descricao_projeto', ''),
                        'regiao': raw_data.get('pais', 'BR'),  # MAPEAR pais -> regiao
                        'videos_excluidos': raw_data.get('ids_negativos', ''),  # MAPEAR ids_negativos -> videos_excluidos
                        'nome_empresa': raw_data.get('nome_empresa', '')
                    }
                    print("‚ö†Ô∏è Usando fun√ß√£o get_projeto_data com mapeamento correto")
                
                # Buscar descri√ß√£o se n√£o veio
                if not data.get('descricao_projeto'):
                    print("\nüìã Buscando descri√ß√£o do projeto diretamente...")
                    projeto_id = data.get('projeto_id')
                    if projeto_id:
                        query_response = await client.get(
                            f"{self.supabase_url}/rest/v1/Projeto",
                            headers=headers,
                            params={
                                "id": f"eq.{projeto_id}",
                                "select": "Descricao"
                            }
                        )
                        if query_response.status_code == 200:
                            projeto_result = query_response.json()
                            if isinstance(projeto_result, list) and len(projeto_result) > 0:
                                data['descricao_projeto'] = projeto_result[0].get('Descricao', '')
                
                print(f"\nüìä DADOS DO PROJETO:")
                print(f"  Scanner ID: {scanner_id}")
                print(f"  Palavra-chave: {data.get('palavra_chave', 'N/A')}")
                print(f"  Nome Empresa: {data.get('nome_empresa', 'N/A')}")
                print(f"  Regi√£o: {data.get('regiao', 'BR')}")
                print(f"  IDs Exclu√≠dos: {len(data.get('videos_excluidos', '').split(',')) if data.get('videos_excluidos') else 0}")
                
                desc = data.get('descricao_projeto', '')
                if desc:
                    print(f"\nüìù DESCRI√á√ÉO DO PROJETO ({len(desc)} caracteres):")
                    print(f"  {desc[:500]}..." if len(desc) > 500 else f"  {desc}")
                else:
                    print(f"\n‚ö†Ô∏è Sem descri√ß√£o do projeto dispon√≠vel")
                
                return data
                
        except Exception as e:
            print(f"‚ùå Erro ao buscar dados: {e}")
            return {}
    
    async def generate_queries_v1_antigo(self, project_data: Dict) -> List[str]:
        """Vers√£o ANTIGA do prompt (problem√°tica)"""
        print(f"\n{'='*80}")
        print(f"‚ùå TESTE COM PROMPT V1 (ANTIGO - Muito Espec√≠fico)")
        print(f"{'='*80}\n")
        
        palavra_chave = project_data.get('palavra_chave', '')
        nome_empresa = project_data.get('nome_empresa', '')
        descricao = project_data.get('descricao_projeto', '')
        regiao = project_data.get('regiao', 'BR')
        
        prompt = f"""Sua miss√£o √© analisar o produto/servi√ßo descrito abaixo e gerar 5 palavras-chave espec√≠ficas que:
1. Tenham rela√ß√£o sem√¢ntica com a palavra-chave base
2. Demonstrem clara inten√ß√£o de compra/uso do servi√ßo  
3. Sejam frequentemente pesquisadas no YouTube por potenciais clientes
4. Levem a v√≠deos com coment√°rios ativos de pessoas discutindo problemas que seu produto/servi√ßo resolve

Company or product name: {nome_empresa}
Palavra-chave base: {palavra_chave}
Regi√£o/Pa√≠s: {regiao}

Audience description:
{descricao if descricao else 'Produto/servi√ßo relacionado a ' + palavra_chave}

Gere 5 queries de busca espec√≠ficas com alta probabilidade de encontrar v√≠deos com pessoas realmente interessadas neste tipo de produto.

IMPORTANTE: Retorne APENAS as 5 queries, uma por linha, sem numera√ß√£o ou explica√ß√µes."""

        print("üìù CARACTER√çSTICAS DO PROMPT V1:")
        print("  ‚Ä¢ Foco em 'inten√ß√£o de compra'")
        print("  ‚Ä¢ Pede queries 'espec√≠ficas'")
        print("  ‚Ä¢ Sem limite de palavras")
        print("  ‚Ä¢ Sem exemplos de boas/m√°s queries\n")
        
        try:
            print("ü§ñ Enviando para Claude...")
            response = self.claude.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=200,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            
            queries_text = response.content[0].text.strip()
            queries = [q.strip() for q in queries_text.split('\n') if q.strip()][:5]
            
            print(f"\nüìã QUERIES GERADAS (V1):\n")
            for i, query in enumerate(queries, 1):
                palavras = len(query.split())
                emoji = "‚ö†Ô∏è" if palavras > 4 else "‚úÖ"
                print(f"  Query {i}: {query} ({palavras} palavras) {emoji}")
            
            return queries
            
        except Exception as e:
            print(f"\n‚ùå Erro ao gerar queries: {e}")
            return []
    
    async def generate_queries_v2_otimizado(self, project_data: Dict) -> List[str]:
        """Nova vers√£o OTIMIZADA do prompt"""
        print(f"\n{'='*80}")
        print(f"‚úÖ TESTE COM PROMPT V2 (OTIMIZADO - Balanceado)")
        print(f"{'='*80}\n")
        
        palavra_chave = project_data.get('palavra_chave', '')
        nome_empresa = project_data.get('nome_empresa', '')
        descricao = project_data.get('descricao_projeto', '')
        regiao = project_data.get('regiao', 'BR')
        
        prompt = f"""Voc√™ √© um especialista em pesquisa no YouTube. Analise o produto/servi√ßo e gere queries de busca OTIMIZADAS.

PRODUTO/SERVI√áO: {palavra_chave}
{f'EMPRESA: {nome_empresa}' if nome_empresa else ''}

CONTEXTO (primeiras linhas):
{descricao[:500] if descricao else 'Produto/servi√ßo relacionado a ' + palavra_chave}...

REGRAS IMPORTANTES:
1. N√ÉO seja muito espec√≠fico (evite combinar muitos termos)
2. Use a palavra-chave principal de forma simples
3. Queries devem ter 2-4 palavras no m√°ximo
4. Foque em termos que pessoas REALMENTE pesquisam
5. Balance entre espec√≠fico e gen√©rico

ESTRAT√âGIA DE QUERIES:
- Query 1: Palavra-chave principal + termo gen√©rico (ex: "shamo puro", "pitbull filhote")
- Query 2: Como + a√ß√£o + palavra-chave (ex: "como criar shamo", "como treinar pitbull")
- Query 3: Palavra-chave + caracter√≠stica importante (ex: "shamo gigante", "pitbull american")
- Query 4: Palavra-chave + inten√ß√£o comercial suave (ex: "shamo venda", "pitbull canil")
- Query 5: Varia√ß√£o ou tipo espec√≠fico mencionado na descri√ß√£o

EXEMPLOS RUINS (muito espec√≠ficos):
‚ùå "shamo pesco√ßo pelado reprodutor original japon√™s"
‚ùå "filhote pitbull american bully extreme pocket micro"

EXEMPLOS BONS (otimizados):
‚úÖ "shamo puro"
‚úÖ "criar shamo"
‚úÖ "pitbull filhote"
‚úÖ "american bully"

Gere 5 queries SIMPLES e EFETIVAS. Retorne APENAS as queries, uma por linha."""

        print("üìù CARACTER√çSTICAS DO PROMPT V2:")
        print("  ‚úÖ Limite de 2-4 palavras")
        print("  ‚úÖ Instru√ß√£o para N√ÉO ser espec√≠fico demais")
        print("  ‚úÖ Exemplos de queries RUINS e BOAS")
        print("  ‚úÖ Estrat√©gia clara para cada query")
        print("  ‚úÖ Foco em termos reais de pesquisa\n")
        
        try:
            print("ü§ñ Enviando para Claude...")
            response = self.claude.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=200,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            
            queries_text = response.content[0].text.strip()
            queries = [q.strip() for q in queries_text.split('\n') if q.strip()][:5]
            
            print(f"\nüìã QUERIES GERADAS (V2):\n")
            for i, query in enumerate(queries, 1):
                palavras = len(query.split())
                emoji = "‚úÖ" if palavras <= 4 else "‚ö†Ô∏è"
                print(f"  Query {i}: {query} ({palavras} palavras) {emoji}")
            
            return queries
            
        except Exception as e:
            print(f"\n‚ùå Erro ao gerar queries: {e}")
            return []

async def main():
    print("\nüöÄ DEBUG ETAPA 1 - COMPARA√á√ÉO DE PROMPTS")
    print("="*80)
    
    scanner_id = 468  # Testando scanner 468
    debug = DebugSearchEngineOtimizado()
    
    # ETAPA 1: Buscar dados do projeto
    project_data = await debug.step1_fetch_project_data(scanner_id)
    
    if not project_data:
        print("\n‚ùå N√£o foi poss√≠vel buscar dados do projeto")
        return
    
    # Gerar queries com PROMPT V1 (antigo)
    queries_v1 = await debug.generate_queries_v1_antigo(project_data)
    
    # Gerar queries com PROMPT V2 (otimizado)
    queries_v2 = await debug.generate_queries_v2_otimizado(project_data)
    
    # COMPARA√á√ÉO FINAL
    print(f"\n{'='*80}")
    print("üìä COMPARA√á√ÉO FINAL")
    print(f"{'='*80}\n")
    
    print("‚ùå PROMPT V1 (ANTIGO):")
    total_palavras_v1 = 0
    for i, query in enumerate(queries_v1, 1):
        palavras = len(query.split())
        total_palavras_v1 += palavras
        print(f"  {i}. {query} ({palavras} palavras)")
    media_v1 = total_palavras_v1 / len(queries_v1) if queries_v1 else 0
    print(f"\n  üìä M√©dia: {media_v1:.1f} palavras por query")
    
    print("\n‚úÖ PROMPT V2 (OTIMIZADO):")
    total_palavras_v2 = 0
    for i, query in enumerate(queries_v2, 1):
        palavras = len(query.split())
        total_palavras_v2 += palavras
        print(f"  {i}. {query} ({palavras} palavras)")
    media_v2 = total_palavras_v2 / len(queries_v2) if queries_v2 else 0
    print(f"\n  üìä M√©dia: {media_v2:.1f} palavras por query")
    
    print(f"\nüéØ MELHORIA: {((media_v1 - media_v2) / media_v1 * 100):.0f}% menos palavras em m√©dia")
    print(f"\nüîç PR√ìXIMA ETAPA: Testar essas queries no YouTube para ver quantos v√≠deos encontram")

if __name__ == "__main__":
    asyncio.run(main())