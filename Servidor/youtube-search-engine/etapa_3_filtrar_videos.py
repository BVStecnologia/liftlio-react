#!/usr/bin/env python3
"""
ETAPA 3 - Buscar Detalhes e Aplicar Filtros de Qualidade
Este arquivo busca estat√≠sticas detalhadas e aplica filtros de qualidade
"""

import asyncio
import json
from typing import Dict, List, Optional
from datetime import datetime
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv
import os

load_dotenv()

class Etapa3FiltrarVideos:
    def __init__(self):
        self.youtube_api_key = os.getenv("YOUTUBE_API_KEY")
        self.youtube = build('youtube', 'v3', developerKey=self.youtube_api_key)
        
        # Filtros de qualidade
        self.MIN_SUBSCRIBERS = 1000  # Canal deve ter 1000+ inscritos
        self.MIN_COMMENTS = 20       # V√≠deo deve ter 20+ coment√°rios
        self.MIN_DURATION = 60        # V√≠deo deve ter mais de 60 segundos
    
    def load_previous_results(self) -> Dict:
        """Carrega resultados da etapa 2"""
        try:
            with open('etapa_2_resultados.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå Arquivo 'etapa_2_resultados.json' n√£o encontrado!")
            print("   Execute primeiro a etapa_2_buscar_youtube.py")
            return None
    
    def parse_duration(self, duration: str) -> int:
        """Converte dura√ß√£o ISO 8601 para segundos"""
        # PT15M33S -> 933 segundos
        # PT1H2M10S -> 3730 segundos
        import re
        
        pattern = re.compile(r'PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?')
        match = pattern.match(duration)
        
        if not match:
            return 0
        
        hours = int(match.group(1) or 0)
        minutes = int(match.group(2) or 0)
        seconds = int(match.group(3) or 0)
        
        return hours * 3600 + minutes * 60 + seconds
    
    async def fetch_video_details(self, video_ids: List[str]) -> Dict:
        """Busca detalhes completos dos v√≠deos"""
        print(f"\nüìä Buscando detalhes de {len(video_ids)} v√≠deos...")
        
        video_details = {}
        
        # YouTube API permite at√© 50 v√≠deos por vez
        batch_size = 50
        for i in range(0, len(video_ids), batch_size):
            batch = video_ids[i:i+batch_size]
            
            try:
                # Buscar estat√≠sticas dos v√≠deos
                videos_response = self.youtube.videos().list(
                    part='statistics,contentDetails,snippet',
                    id=','.join(batch)
                ).execute()
                
                for item in videos_response.get('items', []):
                    video_id = item['id']
                    
                    # Extrair estat√≠sticas
                    stats = item.get('statistics', {})
                    details = item.get('contentDetails', {})
                    snippet = item.get('snippet', {})
                    
                    video_details[video_id] = {
                        'view_count': int(stats.get('viewCount', 0)),
                        'like_count': int(stats.get('likeCount', 0)),
                        'comment_count': int(stats.get('commentCount', 0)),
                        'duration_seconds': self.parse_duration(details.get('duration', 'PT0S')),
                        'channel_id': snippet.get('channelId', ''),
                        'tags': snippet.get('tags', []),
                        'category_id': snippet.get('categoryId', '')
                    }
                    
            except HttpError as e:
                print(f"‚ùå Erro ao buscar detalhes: {e}")
            except Exception as e:
                print(f"‚ùå Erro: {e}")
        
        print(f"‚úÖ Detalhes obtidos para {len(video_details)} v√≠deos")
        return video_details
    
    async def fetch_channel_details(self, channel_ids: List[str]) -> Dict:
        """Busca detalhes dos canais"""
        print(f"\nüì∫ Buscando detalhes de {len(channel_ids)} canais...")
        
        channel_details = {}
        
        # YouTube API permite at√© 50 canais por vez
        batch_size = 50
        for i in range(0, len(channel_ids), batch_size):
            batch = channel_ids[i:i+batch_size]
            
            try:
                channels_response = self.youtube.channels().list(
                    part='statistics,snippet',
                    id=','.join(batch)
                ).execute()
                
                for item in channels_response.get('items', []):
                    channel_id = item['id']
                    stats = item.get('statistics', {})
                    snippet = item.get('snippet', {})
                    
                    channel_details[channel_id] = {
                        'subscriber_count': int(stats.get('subscriberCount', 0)),
                        'video_count': int(stats.get('videoCount', 0)),
                        'view_count': int(stats.get('viewCount', 0)),
                        'title': snippet.get('title', ''),
                        'country': snippet.get('country', '')
                    }
                    
            except HttpError as e:
                print(f"‚ùå Erro ao buscar canais: {e}")
            except Exception as e:
                print(f"‚ùå Erro: {e}")
        
        print(f"‚úÖ Detalhes obtidos para {len(channel_details)} canais")
        return channel_details
    
    def apply_filters(self, videos: List[Dict], video_details: Dict, channel_details: Dict) -> Dict:
        """Aplica filtros de qualidade nos v√≠deos"""
        print(f"\n{'='*80}")
        print("üîç APLICANDO FILTROS DE QUALIDADE")
        print(f"{'='*80}\n")
        
        print(f"üìã Filtros configurados:")
        print(f"  ‚Ä¢ M√≠nimo de inscritos no canal: {self.MIN_SUBSCRIBERS}")
        print(f"  ‚Ä¢ M√≠nimo de coment√°rios no v√≠deo: {self.MIN_COMMENTS}")
        print(f"  ‚Ä¢ Dura√ß√£o m√≠nima: {self.MIN_DURATION} segundos\n")
        
        filtered_videos = []
        rejection_reasons = {
            'no_details': [],
            'no_channel': [],
            'low_subscribers': [],
            'low_comments': [],
            'too_short': [],
            'multiple_reasons': []
        }
        
        for video in videos:
            video_id = video['id']
            channel_id = video.get('channel_id', '')
            
            # Verificar se temos detalhes do v√≠deo
            if video_id not in video_details:
                rejection_reasons['no_details'].append(video_id)
                continue
            
            # Verificar se temos detalhes do canal
            if channel_id not in channel_details:
                rejection_reasons['no_channel'].append(video_id)
                continue
            
            details = video_details[video_id]
            channel = channel_details[channel_id]
            
            # Aplicar filtros
            failures = []
            
            # Filtro 1: Inscritos no canal
            if channel['subscriber_count'] < self.MIN_SUBSCRIBERS:
                failures.append(f"inscritos: {channel['subscriber_count']} < {self.MIN_SUBSCRIBERS}")
            
            # Filtro 2: Coment√°rios no v√≠deo
            if details['comment_count'] < self.MIN_COMMENTS:
                failures.append(f"coment√°rios: {details['comment_count']} < {self.MIN_COMMENTS}")
            
            # Filtro 3: Dura√ß√£o do v√≠deo
            if details['duration_seconds'] < self.MIN_DURATION:
                failures.append(f"dura√ß√£o: {details['duration_seconds']}s < {self.MIN_DURATION}s")
            
            # Se passou em todos os filtros
            if not failures:
                # Adicionar informa√ß√µes completas ao v√≠deo
                video['details'] = details
                video['channel_info'] = channel
                video['engagement_rate'] = self.calculate_engagement(details)
                filtered_videos.append(video)
                
                print(f"‚úÖ APROVADO: {video['title'][:50]}...")
                print(f"   Canal: {channel['title']} ({channel['subscriber_count']:,} inscritos)")
                print(f"   V√≠deo: {details['view_count']:,} views, {details['comment_count']} coment√°rios")
                print(f"   Dura√ß√£o: {details['duration_seconds']}s")
                print(f"   Engajamento: {video['engagement_rate']:.2f}%\n")
            else:
                # Categorizar rejei√ß√£o
                if len(failures) == 1:
                    if 'inscritos' in failures[0]:
                        rejection_reasons['low_subscribers'].append(video_id)
                    elif 'coment√°rios' in failures[0]:
                        rejection_reasons['low_comments'].append(video_id)
                    elif 'dura√ß√£o' in failures[0]:
                        rejection_reasons['too_short'].append(video_id)
                else:
                    rejection_reasons['multiple_reasons'].append(video_id)
                
                print(f"‚ùå REJEITADO: {video['title'][:50]}...")
                for failure in failures:
                    print(f"   ‚Ä¢ {failure}")
                print()
        
        return {
            'filtered_videos': filtered_videos,
            'rejection_reasons': rejection_reasons,
            'total_approved': len(filtered_videos),
            'total_rejected': len(videos) - len(filtered_videos)
        }
    
    def calculate_engagement(self, details: Dict) -> float:
        """Calcula taxa de engajamento do v√≠deo"""
        views = details.get('view_count', 0)
        if views == 0:
            return 0.0
        
        likes = details.get('like_count', 0)
        comments = details.get('comment_count', 0)
        
        return ((likes + comments) / views) * 100
    
    def analyze_filtered_results(self, filter_results: Dict):
        """Analisa e exibe estat√≠sticas dos resultados filtrados"""
        print(f"\n{'='*80}")
        print("üìä AN√ÅLISE DOS FILTROS")
        print(f"{'='*80}\n")
        
        filtered_videos = filter_results['filtered_videos']
        rejection_reasons = filter_results['rejection_reasons']
        
        # Estat√≠sticas gerais
        print(f"üìà ESTAT√çSTICAS GERAIS:")
        print(f"  ‚úÖ Aprovados: {filter_results['total_approved']} v√≠deos")
        print(f"  ‚ùå Rejeitados: {filter_results['total_rejected']} v√≠deos")
        print(f"  üìä Taxa de aprova√ß√£o: {(filter_results['total_approved'] / (filter_results['total_approved'] + filter_results['total_rejected']) * 100):.1f}%\n")
        
        # Motivos de rejei√ß√£o
        print(f"‚ùå MOTIVOS DE REJEI√á√ÉO:")
        print(f"  ‚Ä¢ Poucos inscritos no canal: {len(rejection_reasons['low_subscribers'])} v√≠deos")
        print(f"  ‚Ä¢ Poucos coment√°rios: {len(rejection_reasons['low_comments'])} v√≠deos")
        print(f"  ‚Ä¢ V√≠deo muito curto: {len(rejection_reasons['too_short'])} v√≠deos")
        print(f"  ‚Ä¢ M√∫ltiplos motivos: {len(rejection_reasons['multiple_reasons'])} v√≠deos")
        print(f"  ‚Ä¢ Sem detalhes dispon√≠veis: {len(rejection_reasons['no_details'])} v√≠deos")
        print(f"  ‚Ä¢ Canal sem informa√ß√µes: {len(rejection_reasons['no_channel'])} v√≠deos\n")
        
        if filtered_videos:
            # Top v√≠deos por engajamento
            print(f"üèÜ TOP 5 V√çDEOS POR ENGAJAMENTO:")
            sorted_by_engagement = sorted(filtered_videos, key=lambda x: x['engagement_rate'], reverse=True)[:5]
            for i, video in enumerate(sorted_by_engagement, 1):
                print(f"  {i}. {video['title'][:50]}...")
                print(f"     Engajamento: {video['engagement_rate']:.2f}%")
                print(f"     Views: {video['details']['view_count']:,}")
                print(f"     Canal: {video['channel_info']['title']}\n")
            
            # Canais mais frequentes
            print(f"üì∫ CANAIS MAIS FREQUENTES (ap√≥s filtros):")
            channels_count = {}
            for video in filtered_videos:
                channel_name = video['channel_info']['title']
                channels_count[channel_name] = channels_count.get(channel_name, 0) + 1
            
            for channel, count in sorted(channels_count.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"  ‚Ä¢ {channel}: {count} v√≠deos")

async def main():
    """Executa a etapa 3 completa"""
    print("\n" + "="*80)
    print("üöÄ ETAPA 3 - BUSCAR DETALHES E FILTRAR V√çDEOS")
    print("="*80)
    
    etapa3 = Etapa3FiltrarVideos()
    
    # Carregar resultados da etapa 2
    previous_results = etapa3.load_previous_results()
    if not previous_results:
        return
    
    print(f"\nüìã Dados carregados da etapa 2:")
    print(f"  ‚Ä¢ Scanner ID: {previous_results['scanner_id']}")
    print(f"  ‚Ä¢ Total de v√≠deos: {previous_results['total_found']}")
    print(f"  ‚Ä¢ Queries usadas: {', '.join(previous_results['queries'])}")
    
    videos = previous_results['videos']
    video_ids = [v['id'] for v in videos]
    channel_ids = list(set([v['channel_id'] for v in videos if 'channel_id' in v]))
    
    # Buscar detalhes dos v√≠deos
    video_details = await etapa3.fetch_video_details(video_ids)
    
    # Buscar detalhes dos canais
    channel_details = await etapa3.fetch_channel_details(channel_ids)
    
    # Aplicar filtros
    filter_results = etapa3.apply_filters(videos, video_details, channel_details)
    
    # Analisar resultados
    etapa3.analyze_filtered_results(filter_results)
    
    # Salvar resultados para pr√≥xima etapa
    with open('etapa_3_resultados.json', 'w', encoding='utf-8') as f:
        json.dump({
            'scanner_id': previous_results['scanner_id'],
            'queries': previous_results['queries'],
            'filtered_videos': filter_results['filtered_videos'],
            'total_approved': filter_results['total_approved'],
            'total_rejected': filter_results['total_rejected'],
            'timestamp': datetime.now().isoformat()
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Resultados salvos em 'etapa_3_resultados.json'")
    print(f"\n‚úÖ ETAPA 3 CONCLU√çDA!")
    print(f"   V√≠deos aprovados: {filter_results['total_approved']}")
    print(f"   V√≠deos rejeitados: {filter_results['total_rejected']}")
    print(f"\nüîç PR√ìXIMA ETAPA: An√°lise final com IA para selecionar os 3 melhores")

if __name__ == "__main__":
    asyncio.run(main())