#!/usr/bin/env python3
"""
ETAPA 4 - Sele√ß√£o Final com IA
Claude analisa os v√≠deos filtrados e seleciona os 3 melhores
"""

import asyncio
import json
from typing import Dict, List
from datetime import datetime
from anthropic import Anthropic
from googleapiclient.discovery import build
from dotenv import load_dotenv
import os

load_dotenv()

class Etapa4SelecionarFinal:
    def __init__(self):
        self.claude_api_key = os.getenv("CLAUDE_API_KEY")
        self.claude = Anthropic(api_key=self.claude_api_key)
        self.youtube_api_key = os.getenv("YOUTUBE_API_KEY")
        self.youtube = build('youtube', 'v3', developerKey=self.youtube_api_key)
    
    def load_previous_results(self) -> Dict:
        """Carrega resultados da etapa 3"""
        try:
            with open('etapa_3_resultados.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå Arquivo 'etapa_3_resultados.json' n√£o encontrado!")
            print("   Execute primeiro a etapa_3_filtrar_videos.py")
            return None
    
    async def fetch_video_comments(self, video_id: str, max_comments: int = 50) -> List[str]:
        """Busca coment√°rios de um v√≠deo"""
        try:
            comments_response = self.youtube.commentThreads().list(
                part='snippet',
                videoId=video_id,
                maxResults=max_comments,
                order='relevance',
                textFormat='plainText'
            ).execute()
            
            comments = []
            for item in comments_response.get('items', []):
                comment_text = item['snippet']['topLevelComment']['snippet']['textDisplay']
                comments.append(comment_text[:200])  # Limitar tamanho
            
            return comments[:20]  # M√°ximo 20 coment√°rios mais relevantes
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è N√£o foi poss√≠vel buscar coment√°rios: {e}")
            return []
    
    async def analyze_with_claude(self, videos: List[Dict], scanner_id: int) -> Dict:
        """Claude analisa todos os v√≠deos e seleciona os 3 melhores"""
        print(f"\n{'='*80}")
        print("ü§ñ AN√ÅLISE COM CLAUDE AI")
        print(f"{'='*80}\n")
        
        print(f"üìä Analisando {len(videos)} v√≠deos para selecionar os 3 melhores...")
        
        # Buscar coment√°rios para cada v√≠deo
        print("\nüí¨ Buscando coment√°rios dos v√≠deos...")
        for video in videos:
            video_id = video['id']
            comments = await self.fetch_video_comments(video_id)
            video['sample_comments'] = comments
            print(f"  ‚Ä¢ {video['title'][:50]}... ({len(comments)} coment√°rios)")
        
        # Preparar informa√ß√µes para o Claude
        videos_info = []
        for i, video in enumerate(videos, 1):
            info = f"""
V√çDEO {i}:
ID: {video['id']}
T√≠tulo: {video['title']}
Canal: {video['channel_info']['title']} ({video['channel_info']['subscriber_count']:,} inscritos)
Views: {video['details']['view_count']:,}
Coment√°rios: {video['details']['comment_count']}
Likes: {video['details']['like_count']}
Dura√ß√£o: {video['details']['duration_seconds']} segundos
Engajamento: {video['engagement_rate']:.2f}%
Query que encontrou: {video.get('query', 'N/A')}

Descri√ß√£o (primeiras linhas):
{video.get('description', '')[:300]}...

Amostras de coment√°rios:
{chr(10).join(['- ' + c[:100] for c in video.get('sample_comments', [])[:5]])}
"""
            videos_info.append(info)
        
        # Prompt para o Claude
        prompt = f"""Voc√™ √© um especialista em an√°lise de conte√∫do do YouTube. 
Analise os v√≠deos abaixo sobre "Combatente Shamo" (galos de ra√ßa) e selecione os 3 MELHORES.

CRIT√âRIOS DE SELE√á√ÉO (em ordem de import√¢ncia):
1. LOCALIZA√á√ÉO: Priorize ABSOLUTAMENTE v√≠deos brasileiros/portugueses
2. RELEV√ÇNCIA: O v√≠deo deve ser ESPECIFICAMENTE sobre Shamo/galos combatentes
3. INTEN√á√ÉO COMERCIAL: Coment√°rios indicam interesse em comprar/criar
4. QUALIDADE DO CANAL: Canal especializado no assunto
5. ENGAJAMENTO: Coment√°rios ativos e relevantes

V√çDEOS PARA AN√ÅLISE:
{''.join(videos_info)}

IMPORTANTE:
- PRIORIDADE M√ÅXIMA para canais brasileiros (verifique pa√≠s do canal e idioma dos coment√°rios)
- Coment√°rios em portugu√™s brasileiro s√£o forte indicador
- Evite canais da Indon√©sia, Mal√°sia ou outros pa√≠ses asi√°ticos
- Se houver d√∫vida entre v√≠deos, SEMPRE escolha o brasileiro
- Analise os coment√°rios: se est√£o em portugu√™s, √© bom sinal

Retorne EXATAMENTE no formato:
SELECIONADOS:
1. [ID_DO_VIDEO_1]
2. [ID_DO_VIDEO_2]
3. [ID_DO_VIDEO_3]

JUSTIFICATIVA:
[Explique brevemente por que escolheu estes 3 v√≠deos]"""

        print("\nü§î Claude est√° analisando...")
        
        try:
            response = self.claude.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=500,
                temperature=0.2,
                messages=[{"role": "user", "content": prompt}]
            )
            
            analysis_result = response.content[0].text.strip()
            print("\nüìù AN√ÅLISE DO CLAUDE:")
            print("-" * 60)
            print(analysis_result)
            print("-" * 60)
            
            # Extrair IDs selecionados
            lines = analysis_result.split('\n')
            selected_ids = []
            
            for line in lines:
                # Procurar por padr√µes como "1. [VIDEO_ID]" ou "1. VIDEO_ID"
                import re
                match = re.search(r'\d+\.\s*\[?([A-Za-z0-9_-]+)\]?', line)
                if match and len(selected_ids) < 3:
                    video_id = match.group(1)
                    if video_id in [v['id'] for v in videos]:
                        selected_ids.append(video_id)
            
            # Se n√£o encontrou 3, pegar os primeiros 3 por engajamento
            if len(selected_ids) < 3:
                print("\n‚ö†Ô∏è Claude n√£o retornou 3 IDs v√°lidos, usando fallback por engajamento...")
                sorted_videos = sorted(videos, key=lambda x: x['engagement_rate'], reverse=True)
                selected_ids = [v['id'] for v in sorted_videos[:3]]
            
            return {
                'selected_ids': selected_ids,
                'analysis': analysis_result,
                'success': True
            }
            
        except Exception as e:
            print(f"\n‚ùå Erro na an√°lise do Claude: {e}")
            print("‚ö†Ô∏è Usando sele√ß√£o por engajamento como fallback...")
            
            # Fallback: selecionar top 3 por engajamento
            sorted_videos = sorted(videos, key=lambda x: x['engagement_rate'], reverse=True)
            selected_ids = [v['id'] for v in sorted_videos[:3]]
            
            return {
                'selected_ids': selected_ids,
                'analysis': "Sele√ß√£o autom√°tica por engajamento (fallback)",
                'success': False
            }
    
    def display_final_selection(self, videos: List[Dict], selected_ids: List[str]):
        """Exibe os v√≠deos finais selecionados"""
        print(f"\n{'='*80}")
        print("üèÜ SELE√á√ÉO FINAL - 3 MELHORES V√çDEOS")
        print(f"{'='*80}\n")
        
        selected_videos = []
        for video_id in selected_ids:
            for video in videos:
                if video['id'] == video_id:
                    selected_videos.append(video)
                    break
        
        for i, video in enumerate(selected_videos, 1):
            print(f"ü•á V√çDEO {i}:")
            print(f"   ID: {video['id']}")
            print(f"   T√≠tulo: {video['title']}")
            print(f"   Canal: {video['channel_info']['title']}")
            print(f"   Inscritos: {video['channel_info']['subscriber_count']:,}")
            print(f"   Views: {video['details']['view_count']:,}")
            print(f"   Coment√°rios: {video['details']['comment_count']}")
            print(f"   Engajamento: {video['engagement_rate']:.2f}%")
            print(f"   URL: https://youtube.com/watch?v={video['id']}")
            print()
        
        return selected_videos

async def main():
    """Executa a etapa 4 completa"""
    print("\n" + "="*80)
    print("üöÄ ETAPA 4 - SELE√á√ÉO FINAL COM IA")
    print("="*80)
    
    etapa4 = Etapa4SelecionarFinal()
    
    # Carregar resultados da etapa 3
    previous_results = etapa4.load_previous_results()
    if not previous_results:
        return
    
    print(f"\nüìã Dados carregados da etapa 3:")
    print(f"  ‚Ä¢ Scanner ID: {previous_results['scanner_id']}")
    print(f"  ‚Ä¢ V√≠deos aprovados: {previous_results['total_approved']}")
    print(f"  ‚Ä¢ V√≠deos rejeitados: {previous_results['total_rejected']}")
    
    filtered_videos = previous_results['filtered_videos']
    
    if len(filtered_videos) == 0:
        print("\n‚ùå Nenhum v√≠deo passou pelos filtros!")
        print("   Considere ajustar os filtros na etapa 3")
        return
    
    if len(filtered_videos) <= 3:
        print(f"\n‚ö†Ô∏è Apenas {len(filtered_videos)} v√≠deos dispon√≠veis, retornando todos...")
        selected_ids = [v['id'] for v in filtered_videos]
        selected_videos = filtered_videos
    else:
        # Analisar com Claude
        analysis_result = await etapa4.analyze_with_claude(
            filtered_videos, 
            previous_results['scanner_id']
        )
        
        selected_ids = analysis_result['selected_ids']
        
        # Exibir sele√ß√£o final
        selected_videos = etapa4.display_final_selection(filtered_videos, selected_ids)
    
    # Salvar resultado final
    final_result = {
        'scanner_id': previous_results['scanner_id'],
        'video_ids': selected_ids,
        'video_ids_string': ','.join(selected_ids),
        'selected_videos': selected_videos,
        'total_analyzed': len(filtered_videos),
        'timestamp': datetime.now().isoformat(),
        'success': True
    }
    
    with open('etapa_4_resultado_final.json', 'w', encoding='utf-8') as f:
        json.dump(final_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Resultado final salvo em 'etapa_4_resultado_final.json'")
    
    print(f"\n{'='*80}")
    print("‚úÖ PROCESSO COMPLETO FINALIZADO!")
    print(f"{'='*80}")
    print(f"\nüìä RESUMO FINAL:")
    print(f"  Etapa 1: Queries geradas com IA")
    print(f"  Etapa 2: {previous_results.get('total_found', 49)} v√≠deos encontrados")
    print(f"  Etapa 3: {previous_results['total_approved']} v√≠deos aprovados nos filtros")
    print(f"  Etapa 4: 3 v√≠deos selecionados pela IA")
    print(f"\nüéØ IDs FINAIS PARA O SUPABASE:")
    print(f"  {','.join(selected_ids)}")

if __name__ == "__main__":
    asyncio.run(main())